diff --git a/thirdparty/embree/common/algorithms/parallel_for.h b/thirdparty/embree/common/algorithms/parallel_for.h
index fd5213e7..568b5428 100644
--- a/thirdparty/embree/common/algorithms/parallel_for.h
+++ b/thirdparty/embree/common/algorithms/parallel_for.h
@@ -23,7 +23,9 @@ namespace embree
         },&context);
       TaskScheduler::wait();
       if (context.cancellingException != nullptr) {
-        std::rethrow_exception(context.cancellingException);
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
       }
     }
 #elif defined(TASKING_TBB)
@@ -33,13 +35,17 @@ namespace embree
         func(i);
       },context);
     if (context.is_group_execution_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   #else
     tbb::parallel_for(Index(0),N,Index(1),[&](Index i) {
         func(i);
       });
     if (tbb::task::self().is_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   #endif
 
 #elif defined(TASKING_PPL)
@@ -61,7 +67,9 @@ namespace embree
     TaskScheduler::spawn(first,last,minStepSize,func,&context);
     TaskScheduler::wait();
     if (context.cancellingException != nullptr) {
-      std::rethrow_exception(context.cancellingException);
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     }
 
 #elif defined(TASKING_TBB)
@@ -71,13 +79,17 @@ namespace embree
         func(range<Index>(r.begin(),r.end()));
       },context);
     if (context.is_group_execution_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   #else
     tbb::parallel_for(tbb::blocked_range<Index>(first,last,minStepSize),[&](const tbb::blocked_range<Index>& r) {
         func(range<Index>(r.begin(),r.end()));
       });
     if (tbb::task::self().is_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   #endif
 
 #elif defined(TASKING_PPL)
@@ -109,13 +121,17 @@ namespace embree
           func(i);
         },tbb::simple_partitioner(),context);
       if (context.is_group_execution_cancelled())
-        throw std::runtime_error("task cancelled");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
     #else
       tbb::parallel_for(Index(0),N,Index(1),[&](Index i) {
           func(i);
         },tbb::simple_partitioner());
       if (tbb::task::self().is_cancelled())
-        throw std::runtime_error("task cancelled");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
     #endif
   }
 
@@ -130,13 +146,17 @@ namespace embree
           func(i);
         },ap,context);
       if (context.is_group_execution_cancelled())
-        throw std::runtime_error("task cancelled");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
     #else
       tbb::parallel_for(Index(0),N,Index(1),[&](Index i) {
           func(i);
         },ap);
       if (tbb::task::self().is_cancelled())
-        throw std::runtime_error("task cancelled");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
     #endif
   }
 
diff --git a/thirdparty/embree/common/algorithms/parallel_reduce.h b/thirdparty/embree/common/algorithms/parallel_reduce.h
index b52b1e2e..e2daf58e 100644
--- a/thirdparty/embree/common/algorithms/parallel_reduce.h
+++ b/thirdparty/embree/common/algorithms/parallel_reduce.h
@@ -59,14 +59,18 @@ namespace embree
       [&](const tbb::blocked_range<Index>& r, const Value& start) { return reduction(start,func(range<Index>(r.begin(),r.end()))); },
       reduction,context);
     if (context.is_group_execution_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     return v;
   #else
     const Value v = tbb::parallel_reduce(tbb::blocked_range<Index>(first,last,minStepSize),identity,
       [&](const tbb::blocked_range<Index>& r, const Value& start) { return reduction(start,func(range<Index>(r.begin(),r.end()))); },
       reduction);
     if (tbb::task::self().is_cancelled())
-      throw std::runtime_error("task cancelled");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     return v;
   #endif
 #else // TASKING_PPL
diff --git a/thirdparty/embree/common/lexers/stringstream.cpp b/thirdparty/embree/common/lexers/stringstream.cpp
index 42ffb101..a3cd4ec0 100644
--- a/thirdparty/embree/common/lexers/stringstream.cpp
+++ b/thirdparty/embree/common/lexers/stringstream.cpp
@@ -39,7 +39,9 @@ namespace embree
     std::vector<char> str; str.reserve(64);
     while (cin->peek() != EOF && !isSeparator(cin->peek())) {
       int c = cin->get();
-      if (!isValidChar(c)) throw std::runtime_error("invalid character "+std::string(1,c)+" in input");
+      // Rebel changes start.
+      if (!isValidChar(c)) abort();
+      // Rebel changes end.
       str.push_back((char)c);
     }
     str.push_back(0);
diff --git a/thirdparty/embree/common/sys/alloc.cpp b/thirdparty/embree/common/sys/alloc.cpp
index c92bb99e..e76ce896 100644
--- a/thirdparty/embree/common/sys/alloc.cpp
+++ b/thirdparty/embree/common/sys/alloc.cpp
@@ -20,7 +20,9 @@ namespace embree
     assert((align & (align-1)) == 0);
     void* ptr = _mm_malloc(size,align);
     if (size != 0 && ptr == nullptr)
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     return ptr;
   }
 
@@ -50,7 +52,9 @@ namespace embree
       ptr = sycl::aligned_alloc_shared(align,size,*device,*context);
 
     if (size != 0 && ptr == nullptr)
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
 
     return ptr;
   }
@@ -83,7 +87,9 @@ namespace embree
     }
 
     if (size != 0 && ptr == nullptr)
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
 
     return ptr;
   }
@@ -199,7 +205,9 @@ namespace embree
     /* fall back to 4k pages */
     int flags = MEM_COMMIT | MEM_RESERVE;
     char* ptr = (char*) VirtualAlloc(nullptr,bytes,flags,PAGE_READWRITE);
-    if (ptr == nullptr) throw std::bad_alloc();
+    // Rebel changes start.
+    if (ptr == nullptr) abort();
+    // Rebel changes end.
     hugepages = false;
     return ptr;
   }
@@ -216,7 +224,9 @@ namespace embree
       return bytesOld;
 
     if (!VirtualFree((char*)ptr+bytesNew,bytesOld-bytesNew,MEM_DECOMMIT))
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
 
     return bytesNew;
   }
@@ -227,7 +237,9 @@ namespace embree
       return;
 
     if (!VirtualFree(ptr,0,MEM_RELEASE))
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   }
 
   void os_advise(void *ptr, size_t bytes)
@@ -331,7 +343,9 @@ namespace embree
 
     /* fallback to 4k pages */
     void* ptr = (char*) mmap(0, bytes, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
-    if (ptr == MAP_FAILED) throw std::bad_alloc();
+    // Rebel changes start.
+    if (ptr == MAP_FAILED) abort();
+    // Rebel changes end.
     hugepages = false;
 
     /* advise huge page hint for THP */
@@ -348,7 +362,9 @@ namespace embree
       return bytesOld;
 
     if (munmap((char*)ptr+bytesNew,bytesOld-bytesNew) == -1)
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
 
     return bytesNew;
   }
@@ -362,7 +378,9 @@ namespace embree
     const size_t pageSize = hugepages ? PAGE_SIZE_2M : PAGE_SIZE_4K;
     bytes = (bytes+pageSize-1) & ~(pageSize-1);
     if (munmap(ptr,bytes) == -1)
-      throw std::bad_alloc();
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
   }
 
   /* hint for transparent huge pages (THP) */
diff --git a/thirdparty/embree/common/sys/alloc.h b/thirdparty/embree/common/sys/alloc.h
index 5c63d0bf..667bc3ef 100644
--- a/thirdparty/embree/common/sys/alloc.h
+++ b/thirdparty/embree/common/sys/alloc.h
@@ -131,7 +131,9 @@ namespace embree
       typedef std::ptrdiff_t difference_type;
 
       __forceinline pointer allocate( size_type n ) {
-        throw std::runtime_error("no allocation supported");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
       }
 
       __forceinline void deallocate( pointer p, size_type n ) {
diff --git a/thirdparty/embree/common/sys/platform.h b/thirdparty/embree/common/sys/platform.h
index 6dc0cf33..9b6d7388 100644
--- a/thirdparty/embree/common/sys/platform.h
+++ b/thirdparty/embree/common/sys/platform.h
@@ -212,13 +212,9 @@
 #define UPRINT3(x,y,z) embree_cout_uniform << STRING(x) << " = " << (x) << ", " << STRING(y) << " = " << (y) << ", " << STRING(z) << " = " << (z) << embree_endl
 #define UPRINT4(x,y,z,w) embree_cout_uniform << STRING(x) << " = " << (x) << ", " << STRING(y) << " = " << (y) << ", " << STRING(z) << " = " << (z) << ", " << STRING(w) << " = " << (w) << embree_endl
 
-#if defined(DEBUG) // only report file and line in debug mode
-  #define THROW_RUNTIME_ERROR(str) \
-    throw std::runtime_error(std::string(__FILE__) + " (" + toString(__LINE__) + "): " + std::string(str));
-#else
-  #define THROW_RUNTIME_ERROR(str) \
-    throw std::runtime_error(str);
-#endif
+// Rebel changes start.
+#define THROW_RUNTIME_ERROR(str) abort();
+// Rebel changes end.
 
 #define FATAL(x)   THROW_RUNTIME_ERROR(x)
 #define WARNING(x) { std::cerr << "Warning: " << x << embree_endl << std::flush; }
diff --git a/thirdparty/embree/common/tasking/taskschedulerinternal.cpp b/thirdparty/embree/common/tasking/taskschedulerinternal.cpp
index 83ead951..1a93824c 100644
--- a/thirdparty/embree/common/tasking/taskschedulerinternal.cpp
+++ b/thirdparty/embree/common/tasking/taskschedulerinternal.cpp
@@ -48,13 +48,10 @@ namespace embree
     {
       Task* prevTask = thread.task;
       thread.task = this;
-      try {
-        if (context->cancellingException == nullptr)
-          closure->execute();
-      } catch (...) {
-        if (context->cancellingException == nullptr)
-          context->cancellingException = std::current_exception();
-      }
+      // Rebel changes start.
+      if (context->cancellingException == nullptr)
+        closure->execute();
+      // Rebel changes end.
       thread.task = prevTask;
       add_dependencies(-1);
     }
diff --git a/thirdparty/embree/common/tasking/taskschedulerinternal.h b/thirdparty/embree/common/tasking/taskschedulerinternal.h
index b01bebf7..5e98f5cb 100644
--- a/thirdparty/embree/common/tasking/taskschedulerinternal.h
+++ b/thirdparty/embree/common/tasking/taskschedulerinternal.h
@@ -131,7 +131,9 @@ namespace embree
       {
         size_t ofs = bytes + ((align - stackPtr) & (align-1));
         if (stackPtr + ofs > CLOSURE_STACK_SIZE)
-          throw std::runtime_error("closure stack overflow");
+          // Rebel changes start.
+          abort();
+          // Rebel changes end.
         stackPtr += ofs;
         return &stack[stackPtr-bytes];
       }
@@ -140,7 +142,9 @@ namespace embree
       __forceinline void push_right(Thread& thread, const size_t size, const Closure& closure, TaskGroupContext* context)
       {
         if (right >= TASK_STACK_SIZE)
-          throw std::runtime_error("task stack overflow");
+          // Rebel changes start.
+          abort();
+          // Rebel changes end.
 
 	/* allocate new task on right side of stack */
         size_t oldStackPtr = stackPtr;
@@ -294,7 +298,9 @@ namespace embree
 
       /* re-throw proper exception */
       if (except != nullptr) {
-        std::rethrow_exception(except);
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
       }
     }
 
diff --git a/thirdparty/embree/kernels/bvh/bvh_statistics.cpp b/thirdparty/embree/kernels/bvh/bvh_statistics.cpp
index 40f90437..a5ebc45c 100644
--- a/thirdparty/embree/kernels/bvh/bvh_statistics.cpp
+++ b/thirdparty/embree/kernels/bvh/bvh_statistics.cpp
@@ -150,7 +150,9 @@ namespace embree
       }
     }
     else {
-      throw std::runtime_error("not supported node type in bvh_statistics");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     }
     return s;
   } 
diff --git a/thirdparty/embree/kernels/common/alloc.h b/thirdparty/embree/kernels/common/alloc.h
index 2bd292de..ce21516c 100644
--- a/thirdparty/embree/kernels/common/alloc.h
+++ b/thirdparty/embree/kernels/common/alloc.h
@@ -190,7 +190,9 @@ namespace embree
       , primrefarray(device,0)
     {
       if (osAllocation && useUSM)
-        throw std::runtime_error("USM allocation cannot be combined with OS allocation.");
+        // Rebel changes start.
+        abort();
+        // Rebel changes end.
 
       for (size_t i=0; i<MAX_THREAD_USED_BLOCK_SLOTS; i++)
       {
@@ -503,7 +505,9 @@ namespace embree
         if (myUsedBlocks) {
           void* ptr = myUsedBlocks->malloc(device,bytes,align,partial);
           if (ptr == nullptr && !blockAllocation)
-            throw std::bad_alloc();
+            // Rebel changes start.
+            abort();
+            // Rebel changes end.
           if (ptr) return ptr;
         }
 
diff --git a/thirdparty/embree/kernels/common/rtcore.cpp b/thirdparty/embree/kernels/common/rtcore.cpp
index 8da5c9d8..57dbc38f 100644
--- a/thirdparty/embree/kernels/common/rtcore.cpp
+++ b/thirdparty/embree/kernels/common/rtcore.cpp
@@ -358,7 +358,9 @@ RTC_NAMESPACE_BEGIN;
     if (quality != RTC_BUILD_QUALITY_LOW &&
         quality != RTC_BUILD_QUALITY_MEDIUM &&
         quality != RTC_BUILD_QUALITY_HIGH)
-      throw std::runtime_error("invalid build quality");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     scene->setBuildQuality(quality);
     RTC_CATCH_END2(scene);
   }
@@ -1831,7 +1833,9 @@ RTC_API void rtcSetGeometryTransform(RTCGeometry hgeometry, unsigned int timeSte
         quality != RTC_BUILD_QUALITY_MEDIUM &&
         quality != RTC_BUILD_QUALITY_HIGH &&
         quality != RTC_BUILD_QUALITY_REFIT)
-      throw std::runtime_error("invalid build quality");
+      // Rebel changes start.
+      abort();
+      // Rebel changes end.
     geometry->setBuildQuality(quality);
     RTC_CATCH_END2(geometry);
   }
diff --git a/thirdparty/embree/kernels/common/rtcore.h b/thirdparty/embree/kernels/common/rtcore.h
index 73a061de..926d5409 100644
--- a/thirdparty/embree/kernels/common/rtcore.h
+++ b/thirdparty/embree/kernels/common/rtcore.h
@@ -13,61 +13,12 @@ namespace embree
   __forceinline bool isIncoherent(RTCRayQueryFlags flags) { return (flags & RTC_RAY_QUERY_FLAG_COHERENT) == RTC_RAY_QUERY_FLAG_INCOHERENT; }
 
 /*! Macros used in the rtcore API implementation */
-#if 0
+// Rebel changes start.
 #  define RTC_CATCH_BEGIN
 #  define RTC_CATCH_END(device)
 #  define RTC_CATCH_END2(scene)
 #  define RTC_CATCH_END2_FALSE(scene) return false;
-#else
-  
-#define RTC_CATCH_BEGIN try {
-  
-#define RTC_CATCH_END(device)                                                \
-  } catch (std::bad_alloc&) {                                                   \
-    Device::process_error(device,RTC_ERROR_OUT_OF_MEMORY,"out of memory");      \
-  } catch (rtcore_error& e) {                                                   \
-    Device::process_error(device,e.error,e.what());                             \
-  } catch (std::exception& e) {                                                 \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,e.what());                   \
-  } catch (...) {                                                               \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,"unknown exception caught"); \
-  }
-  
-#define RTC_CATCH_END2(scene)                                                \
-  } catch (std::bad_alloc&) {                                                   \
-    Device* device = scene ? scene->device : nullptr;		\
-    Device::process_error(device,RTC_ERROR_OUT_OF_MEMORY,"out of memory");      \
-  } catch (rtcore_error& e) {                                                   \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,e.error,e.what());                             \
-  } catch (std::exception& e) {                                                 \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,e.what());                   \
-  } catch (...) {                                                               \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,"unknown exception caught"); \
-  }
-
-#define RTC_CATCH_END2_FALSE(scene)                                             \
-  } catch (std::bad_alloc&) {                                                   \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,RTC_ERROR_OUT_OF_MEMORY,"out of memory");      \
-    return false;                                                               \
-  } catch (rtcore_error& e) {                                                   \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,e.error,e.what());                             \
-    return false;                                                               \
-  } catch (std::exception& e) {                                                 \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,e.what());                   \
-    return false;                                                               \
-  } catch (...) {                                                               \
-    Device* device = scene ? scene->device : nullptr;                           \
-    Device::process_error(device,RTC_ERROR_UNKNOWN,"unknown exception caught"); \
-    return false;                                                               \
-  }
-
-#endif
+// Rebel changes end.
   
 #define RTC_VERIFY_HANDLE(handle)                               \
   if (handle == nullptr) {                                         \
@@ -94,29 +45,9 @@ namespace embree
 #define RTC_TRACE(x) 
 #endif
 
-  /*! used to throw embree API errors */
-  struct rtcore_error : public std::exception
-  {
-    __forceinline rtcore_error(RTCError error, const std::string& str)
-      : error(error), str(str) {}
-    
-    ~rtcore_error() throw() {}
-    
-    const char* what () const throw () {
-      return str.c_str();
-    }
-    
-    RTCError error;
-    std::string str;
-  };
-
-#if defined(DEBUG) // only report file and line in debug mode
-  #define throw_RTCError(error,str) \
-    throw rtcore_error(error,std::string(__FILE__) + " (" + toString(__LINE__) + "): " + std::string(str));
-#else
-  #define throw_RTCError(error,str) \
-    throw rtcore_error(error,str);
-#endif
+// Rebel changes start.
+#define throw_RTCError(error,str) abort();
+// Rebel changes end.
 
 #define RTC_BUILD_ARGUMENTS_HAS(settings,member) \
   (settings.byteSize > (offsetof(RTCBuildArguments,member)+sizeof(settings.member)))
diff --git a/thirdparty/embree/kernels/common/scene.cpp b/thirdparty/embree/kernels/common/scene.cpp
index 84a84f8c..35111588 100644
--- a/thirdparty/embree/kernels/common/scene.cpp
+++ b/thirdparty/embree/kernels/common/scene.cpp
@@ -962,16 +962,10 @@ namespace embree
     }
 
     /* initiate build */
-    try {
-      TaskScheduler::TaskGroupContext context;
-      scheduler->spawn_root([&]() { commit_task(); Lock<MutexSys> lock(taskGroup->schedulerMutex); taskGroup->scheduler = nullptr; }, &context, 1, !join);
-    }
-    catch (...) {
-      accels_clear();
-      Lock<MutexSys> lock(taskGroup->schedulerMutex);
-      taskGroup->scheduler = nullptr;
-      throw;
-    }
+    // Rebel changes start.
+    TaskScheduler::TaskGroupContext context;
+    scheduler->spawn_root([&]() { commit_task(); Lock<MutexSys> lock(taskGroup->schedulerMutex); taskGroup->scheduler = nullptr; }, &context, 1, !join);
+    // Rebel changes end.
   }
 
 #endif
diff --git a/thirdparty/embree/kernels/common/state.cpp b/thirdparty/embree/kernels/common/state.cpp
index cce5eafc..69800aef 100644
--- a/thirdparty/embree/kernels/common/state.cpp
+++ b/thirdparty/embree/kernels/common/state.cpp
@@ -199,13 +199,9 @@ namespace embree
   bool State::parseFile(const FileName& fileName)
   { 
     Ref<Stream<int> > file;
-    try {
-      file = new FileStream(fileName);
-    }
-    catch (std::runtime_error& e) {
-      (void) e;
-      return false;
-    }
+    // Rebel changes start.
+    file = new FileStream(fileName);
+    // Rebel changes end.
     
     std::vector<std::string> syms;
     for (size_t i=0; i<sizeof(symbols)/sizeof(void*); i++) 
