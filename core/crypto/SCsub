#!/usr/bin/env python

Import("env")

env_crypto = env.Clone()

is_builtin = env["builtin_mbedtls"]
has_module = env["module_mbedtls_enabled"]
thirdparty_obj = []

# If we're using the builtin thirdparty Mbed TLS library,
# but we're not using the full Mbed TLS module,
# we need to include the path to the Mbed TLS header files.
if is_builtin or not has_module:
    env_crypto.Prepend(CPPPATH=["#thirdparty/mbedtls/include"])

# If we're not using the full Mbed TLS module,
# we need to create a custom build of a subset of the Mbed TLS library.
if not has_module:
    env_thirdparty = env_crypto.Clone()
    env_thirdparty.disable_warnings()
    # Custom config file
    env_thirdparty.Append(
        CPPDEFINES=[
            (
                "MBEDTLS_CONFIG_FILE",
                '\\"core/crypto/mbedtls_config.h\\"',
            )
        ]
    )
    thirdparty_mbedtls_dir = "#thirdparty/mbedtls/library/"
    thirdparty_mbedtls_sources = [
        "aes.c",
        "base64.c",
        "constant_time.c",
        "md5.c",
        "sha1.c",
        "sha256.c",
    ]
    thirdparty_mbedtls_sources = [
        thirdparty_mbedtls_dir + file for file in thirdparty_mbedtls_sources
    ]
    thirdparty_mbedtls_sources.append("mbedtls_platform_util.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_mbedtls_sources)
    env.core_sources += thirdparty_obj


# Rebel source files

core_obj = []

env_crypto.add_source_files(core_obj, "*.cpp")
env.core_sources += core_obj

# Needed to force rebuilding the core files when the thirdparty library is updated.
env.Depends(core_obj, thirdparty_obj)
