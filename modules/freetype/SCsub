#!/usr/bin/env python

Import("env")
Import("env_modules")

from compat import isbasestring

env_freetype = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_freetype"]:
    thirdparty_dir = "#thirdparty/freetype/"
    thirdparty_sources = [
        # All modules have a single object source file
        # <module-name>.c or ft<module-name>.c,
        # which includes all the module's source files;
        # so we only compile these files.
        # Note: the base module's single object source file
        # doesn't actually include all the module's source files;
        # so the other source files are included manually.
        "src/autofit/autofit.c",
        "src/base/ftbase.c",
        "src/base/ftbbox.c",
        "src/base/ftbdf.c",
        "src/base/ftbitmap.c",
        "src/base/ftcid.c",
        "src/base/ftdebug.c",
        "src/base/ftfstype.c",
        "src/base/ftgasp.c",
        "src/base/ftglyph.c",
        "src/base/ftgxval.c",
        "src/base/ftinit.c",
        "src/base/ftmm.c",
        "src/base/ftotval.c",
        "src/base/ftpatent.c",
        "src/base/ftpfr.c",
        "src/base/ftstroke.c",
        "src/base/ftsynth.c",
        "src/base/ftsystem.c",
        "src/base/fttype1.c",
        "src/base/ftwinfnt.c",
        "src/base/md5.c",
        "src/bdf/bdf.c",
        "src/bzip2/ftbzip2.c",
        "src/cache/ftcache.c",
        "src/cff/cff.c",
        "src/cid/type1cid.c",
        "src/dlg/dlgwrap.c",
        "src/gxvalid/gxvalid.c",
        "src/gzip/ftgzip.c",
        "src/lzw/ftlzw.c",
        "src/otvalid/otvalid.c",
        "src/pcf/pcf.c",
        "src/pfr/pfr.c",
        "src/psaux/psaux.c",
        "src/pshinter/pshinter.c",
        "src/psnames/psnames.c",
        "src/raster/raster.c",
        "src/sdf/sdf.c",
        "src/sfnt/sfnt.c",
        "src/smooth/smooth.c",
        "src/svg/svg.c",
        "src/truetype/truetype.c",
        "src/type1/type1.c",
        "src/type42/type42.c",
        "src/winfonts/winfnt.c",
    ]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    if env["platform"] == "uwp":
        # Include header for UWP to fix build issues
        env_freetype.Append(CCFLAGS=["/FI", '"modules/freetype/uwpdef.h"'])
        # Globally too, as freetype is used in scene (see bottom)
        env.Append(CCFLAGS=["/FI", '"modules/freetype/uwpdef.h"'])

    env_freetype.Prepend(CPPPATH=[thirdparty_dir + "/include"])
    # Also needed in main env for scene/
    env.Prepend(CPPPATH=[thirdparty_dir + "/include"])

    env_freetype.Append(CPPDEFINES=["FT2_BUILD_LIBRARY", "FT_CONFIG_OPTION_USE_PNG"])
    if env["target"] == "debug":
        env_freetype.Append(CPPDEFINES=["ZLIB_DEBUG"])

    # Also requires libpng headers
    if env["builtin_libpng"]:
        env_freetype.Prepend(CPPPATH=["#thirdparty/libpng"])

    env_thirdparty = env_freetype.Clone()
    env_thirdparty.disable_warnings()
    lib = env_thirdparty.add_library("freetype_builtin", thirdparty_sources)
    thirdparty_obj += lib

    # Needs to be appended to arrive after libscene in the linker call,
    # but we don't want it to arrive *after* system libs, so manual hack
    # LIBS contains first SCons Library objects ("SCons.Node.FS.File object")
    # and then plain strings for system library. We insert between the two.
    inserted = False
    for idx, linklib in enumerate(env["LIBS"]):
        if isbasestring(linklib):
            # First system library
            env["LIBS"].insert(idx, lib)
            inserted = True
            break
    if not inserted:
        env.Append(LIBS=[lib])


# Module source files

module_obj = []

env_freetype.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
