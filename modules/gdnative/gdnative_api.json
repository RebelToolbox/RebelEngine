{
  "core": {
    "type": "CORE",
    "version": {
      "major": 1,
      "minor": 0
    },
    "next": {
      "type": "CORE",
      "version": {
        "major": 1,
        "minor": 1
      },
      "next": {
        "type": "CORE",
        "version": {
          "major": 1,
          "minor": 2
        },
        "next": null,
        "api": [
          {
            "name": "rebel_dictionary_duplicate",
            "return_type": "rebel_dictionary",
            "arguments": [
              ["const rebel_dictionary *", "p_self"],
              ["const rebel_bool", "p_deep"]
            ]
          },
          {
            "name": "rebel_vector3_move_toward",
            "return_type": "rebel_vector3",
            "arguments": [
              ["const rebel_vector3 *", "p_self"],
              ["const rebel_vector3 *", "p_to"],
              ["const rebel_real", "p_delta"]
            ]
          },
          {
            "name": "rebel_vector2_move_toward",
            "return_type": "rebel_vector2",
            "arguments": [
              ["const rebel_vector2 *", "p_self"],
              ["const rebel_vector2 *", "p_to"],
              ["const rebel_real", "p_delta"]
            ]
          },
          {
            "name": "rebel_string_count",
            "return_type": "rebel_int",
            "arguments": [
              ["const rebel_string *", "p_self"],
              ["rebel_string", "p_what"],
              ["rebel_int", "p_from"],
              ["rebel_int", "p_to"]
            ]
          },
          {
            "name": "rebel_string_countn",
            "return_type": "rebel_int",
            "arguments": [
              ["const rebel_string *", "p_self"],
              ["rebel_string", "p_what"],
              ["rebel_int", "p_from"],
              ["rebel_int", "p_to"]
            ]
          },
          {
            "name": "rebel_vector3_direction_to",
            "return_type": "rebel_vector3",
            "arguments": [
              ["const rebel_vector3 *", "p_self"],
              ["const rebel_vector3 *", "p_to"]
            ]
          },
          {
            "name": "rebel_vector2_direction_to",
            "return_type": "rebel_vector2",
            "arguments": [
              ["const rebel_vector2 *", "p_self"],
              ["const rebel_vector2 *", "p_to"]
            ]
          },
          {
            "name": "rebel_array_slice",
            "return_type": "rebel_array",
            "arguments": [
              ["const rebel_array *", "p_self"],
              ["const rebel_int", "p_begin"],
              ["const rebel_int", "p_end"],
              ["const rebel_int", "p_step"],
              ["const rebel_bool", "p_deep"]
            ]
          },
          {
            "name": "rebel_pool_byte_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_byte_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_int_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_int_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_real_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_real_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_string_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_string_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_vector2_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_vector2_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_vector3_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_vector3_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_pool_color_array_empty",
            "return_type": "rebel_bool",
            "arguments": [
              ["const rebel_pool_color_array *", "p_self"]
            ]
          },
          {
            "name": "rebel_get_class_tag",
            "return_type": "void *",
            "arguments": [
              ["const rebel_string_name *", "p_class"]
            ]
          },
          {
            "name": "rebel_object_cast_to",
            "return_type": "rebel_object *",
            "arguments": [
              ["const rebel_object *", "p_object"],
              ["void *", "p_class_tag"]
            ]
          },
          {
            "name": "rebel_instance_from_id",
            "return_type": "rebel_object *",
            "arguments": [
              ["rebel_int", "p_instance_id"]
            ]
          }
        ]
      },
      "api": [
        {
          "name": "rebel_color_to_abgr32",
          "return_type": "rebel_int",
          "arguments": [
            ["const rebel_color *", "p_self"]
          ]
        },
        {
          "name": "rebel_color_to_abgr64",
          "return_type": "rebel_int",
          "arguments": [
            ["const rebel_color *", "p_self"]
          ]
        },
        {
          "name": "rebel_color_to_argb64",
          "return_type": "rebel_int",
          "arguments": [
            ["const rebel_color *", "p_self"]
          ]
        },
        {
          "name": "rebel_color_to_rgba64",
          "return_type": "rebel_int",
          "arguments": [
            ["const rebel_color *", "p_self"]
          ]
        },
        {
          "name": "rebel_color_darkened",
          "return_type": "rebel_color",
          "arguments": [
            ["const rebel_color *", "p_self"],
            ["const rebel_real", "p_amount"]
          ]
        },
        {
          "name": "rebel_color_from_hsv",
          "return_type": "rebel_color",
          "arguments": [
            ["const rebel_color *", "p_self"],
            ["const rebel_real", "p_h"],
            ["const rebel_real", "p_s"],
            ["const rebel_real", "p_v"],
            ["const rebel_real", "p_a"]
          ]
        },
        {
          "name": "rebel_color_lightened",
          "return_type": "rebel_color",
          "arguments": [
            ["const rebel_color *", "p_self"],
            ["const rebel_real", "p_amount"]
          ]
        },
        {
          "name": "rebel_array_duplicate",
          "return_type": "rebel_array",
          "arguments": [
            ["const rebel_array *", "p_self"],
            ["const rebel_bool", "p_deep"]
          ]
        },
        {
          "name": "rebel_array_max",
          "return_type": "rebel_variant",
          "arguments": [
            ["const rebel_array *", "p_self"]
          ]
        },
        {
          "name": "rebel_array_min",
          "return_type": "rebel_variant",
          "arguments": [
            ["const rebel_array *", "p_self"]
          ]
        },
        {
          "name": "rebel_array_shuffle",
          "return_type": "void",
          "arguments": [
            ["rebel_array *", "p_self"]
          ]
        },
        {
          "name": "rebel_basis_slerp",
          "return_type": "rebel_basis",
          "arguments": [
            ["const rebel_basis *", "p_self"],
            ["const rebel_basis *", "p_b"],
            ["const rebel_real", "p_t"]
          ]
        },
        {
          "name": "rebel_dictionary_get_with_default",
          "return_type": "rebel_variant",
          "arguments": [
            ["const rebel_dictionary *", "p_self"],
            ["const rebel_variant *", "p_key"],
            ["const rebel_variant *", "p_default"]
          ]
        },
        {
          "name": "rebel_dictionary_erase_with_return",
          "return_type": "bool",
          "arguments": [
            ["rebel_dictionary *", "p_self"],
            ["const rebel_variant *", "p_key"]
          ]
        },
        {
          "name": "rebel_node_path_get_as_property_path",
          "return_type": "rebel_node_path",
          "arguments": [
            ["const rebel_node_path *", "p_self"]
          ]
        },
        {
          "name": "rebel_quat_set_axis_angle",
          "return_type": "void",
          "arguments": [
            ["rebel_quat *", "p_self"],
            ["const rebel_vector3 *", "p_axis"],
            ["const rebel_real", "p_angle"]
          ]
        },
        {
          "name": "rebel_rect2_grow_individual",
          "return_type": "rebel_rect2",
          "arguments": [
            ["const rebel_rect2 *", "p_self"],
            ["const rebel_real", "p_left"],
            ["const rebel_real", "p_top"],
            ["const rebel_real", "p_right"],
            ["const rebel_real", "p_bottom"]
          ]
        },
        {
          "name": "rebel_rect2_grow_margin",
          "return_type": "rebel_rect2",
          "arguments": [
            ["const rebel_rect2 *", "p_self"],
            ["const rebel_int", "p_margin"],
            ["const rebel_real", "p_by"]
          ]
        },
        {
          "name": "rebel_rect2_abs",
          "return_type": "rebel_rect2",
          "arguments": [
            ["const rebel_rect2 *", "p_self"]
          ]
        },
        {
          "name": "rebel_string_dedent",
          "return_type": "rebel_string",
          "arguments": [
            ["const rebel_string *", "p_self"]
          ]
        },
        {
          "name": "rebel_string_trim_prefix",
          "return_type": "rebel_string",
          "arguments": [
            ["const rebel_string *", "p_self"],
            ["const rebel_string *", "p_prefix"]
          ]
        },
        {
          "name": "rebel_string_trim_suffix",
          "return_type": "rebel_string",
          "arguments": [
            ["const rebel_string *", "p_self"],
            ["const rebel_string *", "p_suffix"]
          ]
        },
        {
          "name": "rebel_string_rstrip",
          "return_type": "rebel_string",
          "arguments": [
            ["const rebel_string *", "p_self"],
            ["const rebel_string *", "p_chars"]
          ]
        },
        {
          "name": "rebel_string_rsplit",
          "return_type": "rebel_pool_string_array",
          "arguments": [
            ["const rebel_string *", "p_self"],
            ["const rebel_string *", "p_divisor"],
            ["const rebel_bool", "p_allow_empty"],
            ["const rebel_int", "p_maxsplit"]
          ]
        },
        {
          "name": "rebel_basis_get_quat",
          "return_type": "rebel_quat",
          "arguments": [
            ["const rebel_basis *", "p_self"]
          ]
        },
        {
          "name": "rebel_basis_set_quat",
          "return_type": "void",
          "arguments": [
            ["rebel_basis *", "p_self"],
            ["const rebel_quat *", "p_quat"]
          ]
        },
        {
          "name": "rebel_basis_set_axis_angle_scale",
          "return_type": "void",
          "arguments": [
            ["rebel_basis *", "p_self"],
            ["const rebel_vector3 *", "p_axis"],
            ["rebel_real", "p_phi"],
            ["const rebel_vector3 *", "p_scale"]
          ]
        },
        {
          "name": "rebel_basis_set_euler_scale",
          "return_type": "void",
          "arguments": [
            ["rebel_basis *", "p_self"],
            ["const rebel_vector3 *", "p_euler"],
            ["const rebel_vector3 *", "p_scale"]
          ]
        },
        {
          "name": "rebel_basis_set_quat_scale",
          "return_type": "void",
          "arguments": [
            ["rebel_basis *", "p_self"],
            ["const rebel_quat *", "p_quat"],
            ["const rebel_vector3 *", "p_scale"]
          ]
        },
        {
          "name": "rebel_is_instance_valid",
          "return_type": "bool",
          "arguments": [
            ["const rebel_object *", "p_object"]
          ]
        },
        {
          "name": "rebel_quat_new_with_basis",
          "return_type": "void",
          "arguments": [
            ["rebel_quat *", "r_dest"],
            ["const rebel_basis *", "p_basis"]
          ]
        },
        {
          "name": "rebel_quat_new_with_euler",
          "return_type": "void",
          "arguments": [
            ["rebel_quat *", "r_dest"],
            ["const rebel_vector3 *", "p_euler"]
          ]
        },
        {
          "name": "rebel_transform_new_with_quat",
          "return_type": "void",
          "arguments": [
            ["rebel_transform *", "r_dest"],
            ["const rebel_quat *", "p_quat"]
          ]
        },
        {
          "name": "rebel_variant_get_operator_name",
          "return_type": "rebel_string",
          "arguments": [
            ["rebel_variant_operator", "p_op"]
          ]
        },
        {
          "name": "rebel_variant_evaluate",
          "return_type": "void",
          "arguments": [
            ["rebel_variant_operator", "p_op"],
            ["const rebel_variant *", "p_a"],
            ["const rebel_variant *", "p_b"],
            ["rebel_variant *", "r_ret"],
            ["rebel_bool *", "r_valid"]
          ]
        }
      ]
    },
    "api": [
      {
        "name": "rebel_color_new_rgba",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "r_dest"],
          ["const rebel_real", "p_r"],
          ["const rebel_real", "p_g"],
          ["const rebel_real", "p_b"],
          ["const rebel_real", "p_a"]
        ]
      },
      {
        "name": "rebel_color_new_rgb",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "r_dest"],
          ["const rebel_real", "p_r"],
          ["const rebel_real", "p_g"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_color_get_r",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_set_r",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "p_self"],
          ["const rebel_real", "r"]
        ]
      },
      {
        "name": "rebel_color_get_g",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_set_g",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "p_self"],
          ["const rebel_real", "g"]
        ]
      },
      {
        "name": "rebel_color_get_b",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_set_b",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "p_self"],
          ["const rebel_real", "b"]
        ]
      },
      {
        "name": "rebel_color_get_a",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_set_a",
        "return_type": "void",
        "arguments": [
          ["rebel_color *", "p_self"],
          ["const rebel_real", "a"]
        ]
      },
      {
        "name": "rebel_color_get_h",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_get_s",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_get_v",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_to_rgba32",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_to_argb32",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_gray",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_inverted",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_contrasted",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_color *", "p_self"]
        ]
      },
      {
        "name": "rebel_color_linear_interpolate",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_color *", "p_self"],
          ["const rebel_color *", "p_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_color_blend",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_color *", "p_self"],
          ["const rebel_color *", "p_over"]
        ]
      },
      {
        "name": "rebel_color_to_html",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_color *", "p_self"],
          ["const rebel_bool", "p_with_alpha"]
        ]
      },
      {
        "name": "rebel_color_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_color *", "p_self"],
          ["const rebel_color *", "p_b"]
        ]
      },
      {
        "name": "rebel_color_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_color *", "p_self"],
          ["const rebel_color *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_new",
        "return_type": "void",
        "arguments": [
          ["rebel_vector2 *", "r_dest"],
          ["const rebel_real", "p_x"],
          ["const rebel_real", "p_y"]
        ]
      },
      {
        "name": "rebel_vector2_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_normalized",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_length",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_angle",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_length_squared",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_is_normalized",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_distance_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_to"]
        ]
      },
      {
        "name": "rebel_vector2_distance_squared_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_to"]
        ]
      },
      {
        "name": "rebel_vector2_angle_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_to"]
        ]
      },
      {
        "name": "rebel_vector2_angle_to_point",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_to"]
        ]
      },
      {
        "name": "rebel_vector2_linear_interpolate",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_vector2_cubic_interpolate",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"],
          ["const rebel_vector2 *", "p_pre_a"],
          ["const rebel_vector2 *", "p_post_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_vector2_rotated",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_vector2_tangent",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_floor",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_snapped",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_by"]
        ]
      },
      {
        "name": "rebel_vector2_aspect",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_dot",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_with"]
        ]
      },
      {
        "name": "rebel_vector2_slide",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector2_bounce",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector2_reflect",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector2_abs",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_clamped",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_length"]
        ]
      },
      {
        "name": "rebel_vector2_operator_add",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_subtract",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_multiply_vector",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_multiply_scalar",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_divide_vector",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_divide_scalar",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector2 *", "p_self"],
          ["const rebel_vector2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector2_operator_neg",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_set_x",
        "return_type": "void",
        "arguments": [
          ["rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_x"]
        ]
      },
      {
        "name": "rebel_vector2_set_y",
        "return_type": "void",
        "arguments": [
          ["rebel_vector2 *", "p_self"],
          ["const rebel_real", "p_y"]
        ]
      },
      {
        "name": "rebel_vector2_get_x",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector2_get_y",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_new",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "r_dest"],
          ["const rebel_real", "p_x"],
          ["const rebel_real", "p_y"],
          ["const rebel_real", "p_z"],
          ["const rebel_real", "p_w"]
        ]
      },
      {
        "name": "rebel_quat_new_with_axis_angle",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "r_dest"],
          ["const rebel_vector3 *", "p_axis"],
          ["const rebel_real", "p_angle"]
        ]
      },
      {
        "name": "rebel_quat_get_x",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_set_x",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "p_self"],
          ["const rebel_real", "val"]
        ]
      },
      {
        "name": "rebel_quat_get_y",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_set_y",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "p_self"],
          ["const rebel_real", "val"]
        ]
      },
      {
        "name": "rebel_quat_get_z",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_set_z",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "p_self"],
          ["const rebel_real", "val"]
        ]
      },
      {
        "name": "rebel_quat_get_w",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_set_w",
        "return_type": "void",
        "arguments": [
          ["rebel_quat *", "p_self"],
          ["const rebel_real", "val"]
        ]
      },
      {
        "name": "rebel_quat_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_length",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_length_squared",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_normalized",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_is_normalized",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_inverse",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_quat_dot",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_xform",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_quat_slerp",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_quat_slerpni",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_quat_cubic_slerp",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"],
          ["const rebel_quat *", "p_pre_a"],
          ["const rebel_quat *", "p_post_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_quat_operator_multiply",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_operator_add",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_operator_subtract",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_operator_divide",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_quat *", "p_self"],
          ["const rebel_quat *", "p_b"]
        ]
      },
      {
        "name": "rebel_quat_operator_neg",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_quat *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_new_with_rows",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "r_dest"],
          ["const rebel_vector3 *", "p_x_axis"],
          ["const rebel_vector3 *", "p_y_axis"],
          ["const rebel_vector3 *", "p_z_axis"]
        ]
      },
      {
        "name": "rebel_basis_new_with_axis_and_angle",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "r_dest"],
          ["const rebel_vector3 *", "p_axis"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_basis_new_with_euler",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "r_dest"],
          ["const rebel_vector3 *", "p_euler"]
        ]
      },
      {
        "name": "rebel_basis_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_inverse",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_transposed",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_orthonormalized",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_determinant",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_rotated",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_axis"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_basis_scaled",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_scale"]
        ]
      },
      {
        "name": "rebel_basis_get_scale",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_get_euler",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_tdotx",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_with"]
        ]
      },
      {
        "name": "rebel_basis_tdoty",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_with"]
        ]
      },
      {
        "name": "rebel_basis_tdotz",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_with"]
        ]
      },
      {
        "name": "rebel_basis_xform",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_basis_xform_inv",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_basis_get_orthogonal_index",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_basis *", "p_self"]
        ]
      },
      {
        "name": "rebel_basis_new",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "r_dest"]
        ]
      },
      {
        "name": "rebel_basis_new_with_euler_quat",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "r_dest"],
          ["const rebel_quat *", "p_euler"]
        ]
      },
      {
        "name": "rebel_basis_get_elements",
        "return_type": "void",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["rebel_vector3 *", "p_elements"]
        ]
      },
      {
        "name": "rebel_basis_get_axis",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_int", "p_axis"]
        ]
      },
      {
        "name": "rebel_basis_set_axis",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "p_self"],
          ["const rebel_int", "p_axis"],
          ["const rebel_vector3 *", "p_value"]
        ]
      },
      {
        "name": "rebel_basis_get_row",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_int", "p_row"]
        ]
      },
      {
        "name": "rebel_basis_set_row",
        "return_type": "void",
        "arguments": [
          ["rebel_basis *", "p_self"],
          ["const rebel_int", "p_row"],
          ["const rebel_vector3 *", "p_value"]
        ]
      },
      {
        "name": "rebel_basis_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_basis *", "p_b"]
        ]
      },
      {
        "name": "rebel_basis_operator_add",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_basis *", "p_b"]
        ]
      },
      {
        "name": "rebel_basis_operator_subtract",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_basis *", "p_b"]
        ]
      },
      {
        "name": "rebel_basis_operator_multiply_vector",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_basis *", "p_b"]
        ]
      },
      {
        "name": "rebel_basis_operator_multiply_scalar",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_basis *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_new",
        "return_type": "void",
        "arguments": [
          ["rebel_vector3 *", "r_dest"],
          ["const rebel_real", "p_x"],
          ["const rebel_real", "p_y"],
          ["const rebel_real", "p_z"]
        ]
      },
      {
        "name": "rebel_vector3_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_min_axis",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_max_axis",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_length",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_length_squared",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_is_normalized",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_normalized",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_inverse",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_snapped",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_by"]
        ]
      },
      {
        "name": "rebel_vector3_rotated",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_axis"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_vector3_linear_interpolate",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_vector3_cubic_interpolate",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"],
          ["const rebel_vector3 *", "p_pre_a"],
          ["const rebel_vector3 *", "p_post_b"],
          ["const rebel_real", "p_t"]
        ]
      },
      {
        "name": "rebel_vector3_dot",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_cross",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_outer",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_to_diagonal_matrix",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_abs",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_floor",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_ceil",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_distance_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_distance_squared_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_angle_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_to"]
        ]
      },
      {
        "name": "rebel_vector3_slide",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector3_bounce",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector3_reflect",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_n"]
        ]
      },
      {
        "name": "rebel_vector3_operator_add",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_subtract",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_multiply_vector",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_multiply_scalar",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_divide_vector",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_divide_scalar",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_real", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3 *", "p_b"]
        ]
      },
      {
        "name": "rebel_vector3_operator_neg",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_vector3 *", "p_self"]
        ]
      },
      {
        "name": "rebel_vector3_set_axis",
        "return_type": "void",
        "arguments": [
          ["rebel_vector3 *", "p_self"],
          ["const rebel_vector3_axis", "p_axis"],
          ["const rebel_real", "p_val"]
        ]
      },
      {
        "name": "rebel_vector3_get_axis",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_vector3 *", "p_self"],
          ["const rebel_vector3_axis", "p_axis"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "r_dest"],
          ["const rebel_pool_byte_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const uint8_t", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const rebel_pool_byte_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const uint8_t", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const uint8_t", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_read",
        "return_type": "rebel_pool_byte_array_read_access *",
        "arguments": [
          ["const rebel_pool_byte_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_write",
        "return_type": "rebel_pool_byte_array_write_access *",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const uint8_t", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_get",
        "return_type": "uint8_t",
        "arguments": [
          ["const rebel_pool_byte_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_byte_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_int_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_int_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "r_dest"],
          ["const rebel_pool_int_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_int_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_int_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_int_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_pool_int_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_int_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_int", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_int_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_int_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_int_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_int_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_int_array_read",
        "return_type": "rebel_pool_int_array_read_access *",
        "arguments": [
          ["const rebel_pool_int_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_int_array_write",
        "return_type": "rebel_pool_int_array_write_access *",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_int_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_int", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_int_array_get",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_int_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_int_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_int_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_int_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_real_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_real_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "r_dest"],
          ["const rebel_pool_real_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_real_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_real_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_real", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_real_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_pool_real_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_real_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_real", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_real_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_real_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_real", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_real_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_real_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_real_array_read",
        "return_type": "rebel_pool_real_array_read_access *",
        "arguments": [
          ["const rebel_pool_real_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_real_array_write",
        "return_type": "rebel_pool_real_array_write_access *",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_real_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_real", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_real_array_get",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_pool_real_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_real_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_real_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_real_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_string_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_string_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "r_dest"],
          ["const rebel_pool_string_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_string_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_string_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_string *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_string_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_pool_string_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_string_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_string *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_string_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_string_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_string *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_string_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_string_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_string_array_read",
        "return_type": "rebel_pool_string_array_read_access *",
        "arguments": [
          ["const rebel_pool_string_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_string_array_write",
        "return_type": "rebel_pool_string_array_write_access *",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_string_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_string *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_string_array_get",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_pool_string_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_string_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_string_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_string_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "r_dest"],
          ["const rebel_pool_vector2_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_vector2 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_pool_vector2_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_vector2 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_vector2 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_read",
        "return_type": "rebel_pool_vector2_array_read_access *",
        "arguments": [
          ["const rebel_pool_vector2_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_write",
        "return_type": "rebel_pool_vector2_array_write_access *",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_vector2 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_get",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_pool_vector2_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_vector2_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "r_dest"],
          ["const rebel_pool_vector3_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_vector3 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_pool_vector3_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_vector3 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_vector3 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_read",
        "return_type": "rebel_pool_vector3_array_read_access *",
        "arguments": [
          ["const rebel_pool_vector3_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_write",
        "return_type": "rebel_pool_vector3_array_write_access *",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_vector3 *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_get",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_pool_vector3_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_vector3_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_color_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_pool_color_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "r_dest"],
          ["const rebel_pool_color_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_pool_color_array_new_with_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "r_dest"],
          ["const rebel_array *", "p_a"]
        ]
      },
      {
        "name": "rebel_pool_color_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_color *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_color_array_append_array",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_pool_color_array *", "p_array"]
        ]
      },
      {
        "name": "rebel_pool_color_array_insert",
        "return_type": "rebel_error",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_color *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_color_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_color_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_color *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_color_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_color_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_pool_color_array_read",
        "return_type": "rebel_pool_color_array_read_access *",
        "arguments": [
          ["const rebel_pool_color_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_color_array_write",
        "return_type": "rebel_pool_color_array_write_access *",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_color_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_color *", "p_data"]
        ]
      },
      {
        "name": "rebel_pool_color_array_get",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_pool_color_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_pool_color_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_pool_color_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_color_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_read_access_copy",
        "return_type": "rebel_pool_byte_array_read_access *",
        "arguments": [
          ["const rebel_pool_byte_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_read_access_ptr",
        "return_type": "const uint8_t *",
        "arguments": [
          ["const rebel_pool_byte_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array_read_access *", "p_read"],
          ["rebel_pool_byte_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_int_array_read_access_copy",
        "return_type": "rebel_pool_int_array_read_access *",
        "arguments": [
          ["const rebel_pool_int_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_int_array_read_access_ptr",
        "return_type": "const rebel_int *",
        "arguments": [
          ["const rebel_pool_int_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_int_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array_read_access *", "p_read"],
          ["rebel_pool_int_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_int_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_real_array_read_access_copy",
        "return_type": "rebel_pool_real_array_read_access *",
        "arguments": [
          ["const rebel_pool_real_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_real_array_read_access_ptr",
        "return_type": "const rebel_real *",
        "arguments": [
          ["const rebel_pool_real_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_real_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array_read_access *", "p_read"],
          ["rebel_pool_real_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_real_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_string_array_read_access_copy",
        "return_type": "rebel_pool_string_array_read_access *",
        "arguments": [
          ["const rebel_pool_string_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_string_array_read_access_ptr",
        "return_type": "const rebel_string *",
        "arguments": [
          ["const rebel_pool_string_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_string_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array_read_access *", "p_read"],
          ["rebel_pool_string_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_string_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_read_access_copy",
        "return_type": "rebel_pool_vector2_array_read_access *",
        "arguments": [
          ["const rebel_pool_vector2_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_read_access_ptr",
        "return_type": "const rebel_vector2 *",
        "arguments": [
          ["const rebel_pool_vector2_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array_read_access *", "p_read"],
          ["rebel_pool_vector2_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_read_access_copy",
        "return_type": "rebel_pool_vector3_array_read_access *",
        "arguments": [
          ["const rebel_pool_vector3_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_read_access_ptr",
        "return_type": "const rebel_vector3 *",
        "arguments": [
          ["const rebel_pool_vector3_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array_read_access *", "p_read"],
          ["rebel_pool_vector3_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_color_array_read_access_copy",
        "return_type": "rebel_pool_color_array_read_access *",
        "arguments": [
          ["const rebel_pool_color_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_color_array_read_access_ptr",
        "return_type": "const rebel_color *",
        "arguments": [
          ["const rebel_pool_color_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_color_array_read_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array_read_access *", "p_read"],
          ["rebel_pool_color_array_read_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_color_array_read_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array_read_access *", "p_read"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_write_access_copy",
        "return_type": "rebel_pool_byte_array_write_access *",
        "arguments": [
          ["const rebel_pool_byte_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_write_access_ptr",
        "return_type": "uint8_t *",
        "arguments": [
          ["const rebel_pool_byte_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array_write_access *", "p_write"],
          ["rebel_pool_byte_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_byte_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_byte_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_int_array_write_access_copy",
        "return_type": "rebel_pool_int_array_write_access *",
        "arguments": [
          ["const rebel_pool_int_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_int_array_write_access_ptr",
        "return_type": "rebel_int *",
        "arguments": [
          ["const rebel_pool_int_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_int_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array_write_access *", "p_write"],
          ["rebel_pool_int_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_int_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_int_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_real_array_write_access_copy",
        "return_type": "rebel_pool_real_array_write_access *",
        "arguments": [
          ["const rebel_pool_real_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_real_array_write_access_ptr",
        "return_type": "rebel_real *",
        "arguments": [
          ["const rebel_pool_real_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_real_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array_write_access *", "p_write"],
          ["rebel_pool_real_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_real_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_real_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_string_array_write_access_copy",
        "return_type": "rebel_pool_string_array_write_access *",
        "arguments": [
          ["const rebel_pool_string_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_string_array_write_access_ptr",
        "return_type": "rebel_string *",
        "arguments": [
          ["const rebel_pool_string_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_string_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array_write_access *", "p_write"],
          ["rebel_pool_string_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_string_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_string_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_write_access_copy",
        "return_type": "rebel_pool_vector2_array_write_access *",
        "arguments": [
          ["const rebel_pool_vector2_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_write_access_ptr",
        "return_type": "rebel_vector2 *",
        "arguments": [
          ["const rebel_pool_vector2_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array_write_access *", "p_write"],
          ["rebel_pool_vector2_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_vector2_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector2_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_write_access_copy",
        "return_type": "rebel_pool_vector3_array_write_access *",
        "arguments": [
          ["const rebel_pool_vector3_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_write_access_ptr",
        "return_type": "rebel_vector3 *",
        "arguments": [
          ["const rebel_pool_vector3_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array_write_access *", "p_write"],
          ["rebel_pool_vector3_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_vector3_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_vector3_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_color_array_write_access_copy",
        "return_type": "rebel_pool_color_array_write_access *",
        "arguments": [
          ["const rebel_pool_color_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_color_array_write_access_ptr",
        "return_type": "rebel_color *",
        "arguments": [
          ["const rebel_pool_color_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_pool_color_array_write_access_operator_assign",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array_write_access *", "p_write"],
          ["rebel_pool_color_array_write_access *", "p_other"]
        ]
      },
      {
        "name": "rebel_pool_color_array_write_access_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_pool_color_array_write_access *", "p_write"]
        ]
      },
      {
        "name": "rebel_array_new",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"]
        ]
      },
      {
        "name": "rebel_array_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_array *", "p_src"]
        ]
      },
      {
        "name": "rebel_array_new_pool_color_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_color_array *", "p_pca"]
        ]
      },
      {
        "name": "rebel_array_new_pool_vector3_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_vector3_array *", "p_pv3a"]
        ]
      },
      {
        "name": "rebel_array_new_pool_vector2_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_vector2_array *", "p_pv2a"]
        ]
      },
      {
        "name": "rebel_array_new_pool_string_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_string_array *", "p_psa"]
        ]
      },
      {
        "name": "rebel_array_new_pool_real_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_real_array *", "p_pra"]
        ]
      },
      {
        "name": "rebel_array_new_pool_int_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_int_array *", "p_pia"]
        ]
      },
      {
        "name": "rebel_array_new_pool_byte_array",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "r_dest"],
          ["const rebel_pool_byte_array *", "p_pba"]
        ]
      },
      {
        "name": "rebel_array_set",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_int", "p_idx"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_get",
        "return_type": "rebel_variant",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_array_operator_index",
        "return_type": "rebel_variant *",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_array_operator_index_const",
        "return_type": "const rebel_variant *",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_array_append",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_clear",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_count",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_empty",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_erase",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_front",
        "return_type": "rebel_variant",
        "arguments": [
          ["const rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_back",
        "return_type": "rebel_variant",
        "arguments": [
          ["const rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_find",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_variant *", "p_what"],
          ["const rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_array_find_last",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_variant *", "p_what"]
        ]
      },
      {
        "name": "rebel_array_has",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_hash",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_insert",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_int", "p_pos"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_invert",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_pop_back",
        "return_type": "rebel_variant",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_pop_front",
        "return_type": "rebel_variant",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_push_back",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_push_front",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_array_remove",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_array_resize",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_int", "p_size"]
        ]
      },
      {
        "name": "rebel_array_rfind",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"],
          ["const rebel_variant *", "p_what"],
          ["const rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_array_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_sort",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_array_sort_custom",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["rebel_object *", "p_obj"],
          ["const rebel_string *", "p_func"]
        ]
      },
      {
        "name": "rebel_array_bsearch",
        "return_type": "rebel_int",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"],
          ["const rebel_bool", "p_before"]
        ]
      },
      {
        "name": "rebel_array_bsearch_custom",
        "return_type": "rebel_int",
        "arguments": [
          ["rebel_array *", "p_self"],
          ["const rebel_variant *", "p_value"],
          ["rebel_object *", "p_obj"],
          ["const rebel_string *", "p_func"],
          ["const rebel_bool", "p_before"]
        ]
      },
      {
        "name": "rebel_array_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_array *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_new",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "r_dest"]
        ]
      },
      {
        "name": "rebel_dictionary_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "r_dest"],
          ["const rebel_dictionary *", "p_src"]
        ]
      },
      {
        "name": "rebel_dictionary_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_size",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_empty",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_clear",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_has",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_has_all",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_array *", "p_keys"]
        ]
      },
      {
        "name": "rebel_dictionary_erase",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_hash",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_keys",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_values",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_dictionary_get",
        "return_type": "rebel_variant",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_set",
        "return_type": "void",
        "arguments": [
          ["rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"],
          ["const rebel_variant *", "p_value"]
        ]
      },
      {
        "name": "rebel_dictionary_operator_index",
        "return_type": "rebel_variant *",
        "arguments": [
          ["rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_operator_index_const",
        "return_type": "const rebel_variant *",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_next",
        "return_type": "rebel_variant *",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_variant *", "p_key"]
        ]
      },
      {
        "name": "rebel_dictionary_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_dictionary *", "p_self"],
          ["const rebel_dictionary *", "p_b"]
        ]
      },
      {
        "name": "rebel_dictionary_to_json",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_dictionary *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_new",
        "return_type": "void",
        "arguments": [
          ["rebel_node_path *", "r_dest"],
          ["const rebel_string *", "p_from"]
        ]
      },
      {
        "name": "rebel_node_path_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_node_path *", "r_dest"],
          ["const rebel_node_path *", "p_src"]
        ]
      },
      {
        "name": "rebel_node_path_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_is_absolute",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_get_name_count",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_get_name",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_node_path *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_node_path_get_subname_count",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_get_subname",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_node_path *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_node_path_get_concatenated_subnames",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_is_empty",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_node_path *", "p_self"]
        ]
      },
      {
        "name": "rebel_node_path_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_node_path *", "p_self"],
          ["const rebel_node_path *", "p_b"]
        ]
      },
      {
        "name": "rebel_plane_new_with_reals",
        "return_type": "void",
        "arguments": [
          ["rebel_plane *", "r_dest"],
          ["const rebel_real", "p_a"],
          ["const rebel_real", "p_b"],
          ["const rebel_real", "p_c"],
          ["const rebel_real", "p_d"]
        ]
      },
      {
        "name": "rebel_plane_new_with_vectors",
        "return_type": "void",
        "arguments": [
          ["rebel_plane *", "r_dest"],
          ["const rebel_vector3 *", "p_v1"],
          ["const rebel_vector3 *", "p_v2"],
          ["const rebel_vector3 *", "p_v3"]
        ]
      },
      {
        "name": "rebel_plane_new_with_normal",
        "return_type": "void",
        "arguments": [
          ["rebel_plane *", "r_dest"],
          ["const rebel_vector3 *", "p_normal"],
          ["const rebel_real", "p_d"]
        ]
      },
      {
        "name": "rebel_plane_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_normalized",
        "return_type": "rebel_plane",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_center",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_get_any_point",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_is_point_over",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["const rebel_vector3 *", "p_point"]
        ]
      },
      {
        "name": "rebel_plane_distance_to",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["const rebel_vector3 *", "p_point"]
        ]
      },
      {
        "name": "rebel_plane_has_point",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["const rebel_vector3 *", "p_point"],
          ["const rebel_real", "p_epsilon"]
        ]
      },
      {
        "name": "rebel_plane_project",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["const rebel_vector3 *", "p_point"]
        ]
      },
      {
        "name": "rebel_plane_intersect_3",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["rebel_vector3 *", "r_dest"],
          ["const rebel_plane *", "p_b"],
          ["const rebel_plane *", "p_c"]
        ]
      },
      {
        "name": "rebel_plane_intersects_ray",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["rebel_vector3 *", "r_dest"],
          ["const rebel_vector3 *", "p_from"],
          ["const rebel_vector3 *", "p_dir"]
        ]
      },
      {
        "name": "rebel_plane_intersects_segment",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["rebel_vector3 *", "r_dest"],
          ["const rebel_vector3 *", "p_begin"],
          ["const rebel_vector3 *", "p_end"]
        ]
      },
      {
        "name": "rebel_plane_operator_neg",
        "return_type": "rebel_plane",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_plane *", "p_self"],
          ["const rebel_plane *", "p_b"]
        ]
      },
      {
        "name": "rebel_plane_set_normal",
        "return_type": "void",
        "arguments": [
          ["rebel_plane *", "p_self"],
          ["const rebel_vector3 *", "p_normal"]
        ]
      },
      {
        "name": "rebel_plane_get_normal",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_get_d",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_plane *", "p_self"]
        ]
      },
      {
        "name": "rebel_plane_set_d",
        "return_type": "void",
        "arguments": [
          ["rebel_plane *", "p_self"],
          ["const rebel_real", "p_d"]
        ]
      },
      {
        "name": "rebel_rect2_new_with_position_and_size",
        "return_type": "void",
        "arguments": [
          ["rebel_rect2 *", "r_dest"],
          ["const rebel_vector2 *", "p_pos"],
          ["const rebel_vector2 *", "p_size"]
        ]
      },
      {
        "name": "rebel_rect2_new",
        "return_type": "void",
        "arguments": [
          ["rebel_rect2 *", "r_dest"],
          ["const rebel_real", "p_x"],
          ["const rebel_real", "p_y"],
          ["const rebel_real", "p_width"],
          ["const rebel_real", "p_height"]
        ]
      },
      {
        "name": "rebel_rect2_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_rect2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_rect2_get_area",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_rect2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_rect2_intersects",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_rect2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_rect2_encloses",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_rect2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_rect2_has_no_area",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rect2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_rect2_clip",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_rect2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_rect2_merge",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_rect2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_rect2_has_point",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_vector2 *", "p_point"]
        ]
      },
      {
        "name": "rebel_rect2_grow",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_real", "p_by"]
        ]
      },
      {
        "name": "rebel_rect2_expand",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_vector2 *", "p_to"]
        ]
      },
      {
        "name": "rebel_rect2_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rect2 *", "p_self"],
          ["const rebel_rect2 *", "p_b"]
        ]
      },
      {
        "name": "rebel_rect2_get_position",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_rect2_get_size",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_rect2 *", "p_self"]
        ]
      },
      {
        "name": "rebel_rect2_set_position",
        "return_type": "void",
        "arguments": [
          ["rebel_rect2 *", "p_self"],
          ["const rebel_vector2 *", "p_pos"]
        ]
      },
      {
        "name": "rebel_rect2_set_size",
        "return_type": "void",
        "arguments": [
          ["rebel_rect2 *", "p_self"],
          ["const rebel_vector2 *", "p_size"]
        ]
      },
      {
        "name": "rebel_aabb_new",
        "return_type": "void",
        "arguments": [
          ["rebel_aabb *", "r_dest"],
          ["const rebel_vector3 *", "p_pos"],
          ["const rebel_vector3 *", "p_size"]
        ]
      },
      {
        "name": "rebel_aabb_get_position",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_set_position",
        "return_type": "void",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_aabb_get_size",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_set_size",
        "return_type": "void",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_aabb_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_area",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_has_no_area",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_has_no_surface",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_intersects",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_aabb *", "p_with"]
        ]
      },
      {
        "name": "rebel_aabb_encloses",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_aabb *", "p_with"]
        ]
      },
      {
        "name": "rebel_aabb_merge",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_aabb *", "p_with"]
        ]
      },
      {
        "name": "rebel_aabb_intersection",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_aabb *", "p_with"]
        ]
      },
      {
        "name": "rebel_aabb_intersects_plane",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_plane *", "p_plane"]
        ]
      },
      {
        "name": "rebel_aabb_intersects_segment",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_from"],
          ["const rebel_vector3 *", "p_to"]
        ]
      },
      {
        "name": "rebel_aabb_has_point",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_point"]
        ]
      },
      {
        "name": "rebel_aabb_get_support",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_dir"]
        ]
      },
      {
        "name": "rebel_aabb_get_longest_axis",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_longest_axis_index",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_longest_axis_size",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_shortest_axis",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_shortest_axis_index",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_get_shortest_axis_size",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_aabb *", "p_self"]
        ]
      },
      {
        "name": "rebel_aabb_expand",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_vector3 *", "p_to_point"]
        ]
      },
      {
        "name": "rebel_aabb_grow",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_real", "p_by"]
        ]
      },
      {
        "name": "rebel_aabb_get_endpoint",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_aabb_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_aabb *", "p_self"],
          ["const rebel_aabb *", "p_b"]
        ]
      },
      {
        "name": "rebel_rid_new",
        "return_type": "void",
        "arguments": [
          ["rebel_rid *", "r_dest"]
        ]
      },
      {
        "name": "rebel_rid_get_id",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_rid *", "p_self"]
        ]
      },
      {
        "name": "rebel_rid_new_with_resource",
        "return_type": "void",
        "arguments": [
          ["rebel_rid *", "r_dest"],
          ["const rebel_object *", "p_from"]
        ]
      },
      {
        "name": "rebel_rid_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rid *", "p_self"],
          ["const rebel_rid *", "p_b"]
        ]
      },
      {
        "name": "rebel_rid_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_rid *", "p_self"],
          ["const rebel_rid *", "p_b"]
        ]
      },
      {
        "name": "rebel_transform_new_with_axis_origin",
        "return_type": "void",
        "arguments": [
          ["rebel_transform *", "r_dest"],
          ["const rebel_vector3 *", "p_x_axis"],
          ["const rebel_vector3 *", "p_y_axis"],
          ["const rebel_vector3 *", "p_z_axis"],
          ["const rebel_vector3 *", "p_origin"]
        ]
      },
      {
        "name": "rebel_transform_new",
        "return_type": "void",
        "arguments": [
          ["rebel_transform *", "r_dest"],
          ["const rebel_basis *", "p_basis"],
          ["const rebel_vector3 *", "p_origin"]
        ]
      },
      {
        "name": "rebel_transform_get_basis",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_set_basis",
        "return_type": "void",
        "arguments": [
          ["rebel_transform *", "p_self"],
          ["const rebel_basis *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_get_origin",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_set_origin",
        "return_type": "void",
        "arguments": [
          ["rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_inverse",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_affine_inverse",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_orthonormalized",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform_rotated",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_axis"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_transform_scaled",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_scale"]
        ]
      },
      {
        "name": "rebel_transform_translated",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_ofs"]
        ]
      },
      {
        "name": "rebel_transform_looking_at",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_target"],
          ["const rebel_vector3 *", "p_up"]
        ]
      },
      {
        "name": "rebel_transform_xform_plane",
        "return_type": "rebel_plane",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_plane *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_xform_inv_plane",
        "return_type": "rebel_plane",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_plane *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_new_identity",
        "return_type": "void",
        "arguments": [
          ["rebel_transform *", "r_dest"]
        ]
      },
      {
        "name": "rebel_transform_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_transform *", "p_b"]
        ]
      },
      {
        "name": "rebel_transform_operator_multiply",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_transform *", "p_b"]
        ]
      },
      {
        "name": "rebel_transform_xform_vector3",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_xform_inv_vector3",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_vector3 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_xform_aabb",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_aabb *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform_xform_inv_aabb",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_transform *", "p_self"],
          ["const rebel_aabb *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_new",
        "return_type": "void",
        "arguments": [
          ["rebel_transform2d *", "r_dest"],
          ["const rebel_real", "p_rot"],
          ["const rebel_vector2 *", "p_pos"]
        ]
      },
      {
        "name": "rebel_transform2d_new_axis_origin",
        "return_type": "void",
        "arguments": [
          ["rebel_transform2d *", "r_dest"],
          ["const rebel_vector2 *", "p_x_axis"],
          ["const rebel_vector2 *", "p_y_axis"],
          ["const rebel_vector2 *", "p_origin"]
        ]
      },
      {
        "name": "rebel_transform2d_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_inverse",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_affine_inverse",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_get_rotation",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_get_origin",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_get_scale",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_orthonormalized",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"]
        ]
      },
      {
        "name": "rebel_transform2d_rotated",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_real", "p_phi"]
        ]
      },
      {
        "name": "rebel_transform2d_scaled",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_scale"]
        ]
      },
      {
        "name": "rebel_transform2d_translated",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_offset"]
        ]
      },
      {
        "name": "rebel_transform2d_xform_vector2",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_xform_inv_vector2",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_basis_xform_vector2",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_basis_xform_inv_vector2",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_vector2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_interpolate_with",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_transform2d *", "p_m"],
          ["const rebel_real", "p_c"]
        ]
      },
      {
        "name": "rebel_transform2d_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_transform2d *", "p_b"]
        ]
      },
      {
        "name": "rebel_transform2d_operator_multiply",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_transform2d *", "p_b"]
        ]
      },
      {
        "name": "rebel_transform2d_new_identity",
        "return_type": "void",
        "arguments": [
          ["rebel_transform2d *", "r_dest"]
        ]
      },
      {
        "name": "rebel_transform2d_xform_rect2",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_rect2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_transform2d_xform_inv_rect2",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_transform2d *", "p_self"],
          ["const rebel_rect2 *", "p_v"]
        ]
      },
      {
        "name": "rebel_variant_get_type",
        "return_type": "rebel_variant_type",
        "arguments": [
          ["const rebel_variant *", "p_v"]
        ]
      },
      {
        "name": "rebel_variant_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_variant *", "p_src"]
        ]
      },
      {
        "name": "rebel_variant_new_nil",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"]
        ]
      },
      {
        "name": "rebel_variant_new_bool",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_bool", "p_b"]
        ]
      },
      {
        "name": "rebel_variant_new_uint",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const uint64_t", "p_i"]
        ]
      },
      {
        "name": "rebel_variant_new_int",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const int64_t", "p_i"]
        ]
      },
      {
        "name": "rebel_variant_new_real",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const double", "p_r"]
        ]
      },
      {
        "name": "rebel_variant_new_string",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_string *", "p_s"]
        ]
      },
      {
        "name": "rebel_variant_new_vector2",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_vector2 *", "p_v2"]
        ]
      },
      {
        "name": "rebel_variant_new_rect2",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_rect2 *", "p_rect2"]
        ]
      },
      {
        "name": "rebel_variant_new_vector3",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_vector3 *", "p_v3"]
        ]
      },
      {
        "name": "rebel_variant_new_transform2d",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_transform2d *", "p_t2d"]
        ]
      },
      {
        "name": "rebel_variant_new_plane",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_plane *", "p_plane"]
        ]
      },
      {
        "name": "rebel_variant_new_quat",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_quat *", "p_quat"]
        ]
      },
      {
        "name": "rebel_variant_new_aabb",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_aabb *", "p_aabb"]
        ]
      },
      {
        "name": "rebel_variant_new_basis",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_basis *", "p_basis"]
        ]
      },
      {
        "name": "rebel_variant_new_transform",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_transform *", "p_trans"]
        ]
      },
      {
        "name": "rebel_variant_new_color",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_color *", "p_color"]
        ]
      },
      {
        "name": "rebel_variant_new_node_path",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_node_path *", "p_np"]
        ]
      },
      {
        "name": "rebel_variant_new_rid",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_rid *", "p_rid"]
        ]
      },
      {
        "name": "rebel_variant_new_object",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_object *", "p_obj"]
        ]
      },
      {
        "name": "rebel_variant_new_dictionary",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_dictionary *", "p_dict"]
        ]
      },
      {
        "name": "rebel_variant_new_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_array *", "p_arr"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_byte_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_byte_array *", "p_pba"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_int_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_int_array *", "p_pia"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_real_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_real_array *", "p_pra"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_string_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_string_array *", "p_psa"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_vector2_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_vector2_array *", "p_pv2a"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_vector3_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_vector3_array *", "p_pv3a"]
        ]
      },
      {
        "name": "rebel_variant_new_pool_color_array",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "r_dest"],
          ["const rebel_pool_color_array *", "p_pca"]
        ]
      },
      {
        "name": "rebel_variant_as_bool",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_uint",
        "return_type": "uint64_t",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_int",
        "return_type": "int64_t",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_real",
        "return_type": "double",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_string",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_vector2",
        "return_type": "rebel_vector2",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_rect2",
        "return_type": "rebel_rect2",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_vector3",
        "return_type": "rebel_vector3",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_transform2d",
        "return_type": "rebel_transform2d",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_plane",
        "return_type": "rebel_plane",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_quat",
        "return_type": "rebel_quat",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_aabb",
        "return_type": "rebel_aabb",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_basis",
        "return_type": "rebel_basis",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_transform",
        "return_type": "rebel_transform",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_color",
        "return_type": "rebel_color",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_node_path",
        "return_type": "rebel_node_path",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_rid",
        "return_type": "rebel_rid",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_object",
        "return_type": "rebel_object *",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_dictionary",
        "return_type": "rebel_dictionary",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_array",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_byte_array",
        "return_type": "rebel_pool_byte_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_int_array",
        "return_type": "rebel_pool_int_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_real_array",
        "return_type": "rebel_pool_real_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_string_array",
        "return_type": "rebel_pool_string_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_vector2_array",
        "return_type": "rebel_pool_vector2_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_vector3_array",
        "return_type": "rebel_pool_vector3_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_as_pool_color_array",
        "return_type": "rebel_pool_color_array",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_call",
        "return_type": "rebel_variant",
        "arguments": [
          ["rebel_variant *", "p_self"],
          ["const rebel_string *", "p_method"],
          ["const rebel_variant **", "p_args"],
          ["const rebel_int", "p_argcount"],
          ["rebel_variant_call_error *", "r_error"]
        ]
      },
      {
        "name": "rebel_variant_has_method",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"],
          ["const rebel_string *", "p_method"]
        ]
      },
      {
        "name": "rebel_variant_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"],
          ["const rebel_variant *", "p_other"]
        ]
      },
      {
        "name": "rebel_variant_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"],
          ["const rebel_variant *", "p_other"]
        ]
      },
      {
        "name": "rebel_variant_hash_compare",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"],
          ["const rebel_variant *", "p_other"]
        ]
      },
      {
        "name": "rebel_variant_booleanize",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_variant_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_variant *", "p_self"]
        ]
      },
      {
        "name": "rebel_char_string_length",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_char_string *", "p_cs"]
        ]
      },
      {
        "name": "rebel_char_string_get_data",
        "return_type": "const char *",
        "arguments": [
          ["const rebel_char_string *", "p_cs"]
        ]
      },
      {
        "name": "rebel_char_string_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_char_string *", "p_cs"]
        ]
      },
      {
        "name": "rebel_string_new",
        "return_type": "void",
        "arguments": [
          ["rebel_string *", "r_dest"]
        ]
      },
      {
        "name": "rebel_string_new_copy",
        "return_type": "void",
        "arguments": [
          ["rebel_string *", "r_dest"],
          ["const rebel_string *", "p_src"]
        ]
      },
      {
        "name": "rebel_string_new_with_wide_string",
        "return_type": "void",
        "arguments": [
          ["rebel_string *", "r_dest"],
          ["const wchar_t *", "p_contents"],
          ["const int", "p_size"]
        ]
      },
      {
        "name": "rebel_string_operator_index",
        "return_type": "const wchar_t *",
        "arguments": [
          ["rebel_string *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_string_operator_index_const",
        "return_type": "wchar_t",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_string_wide_str",
        "return_type": "const wchar_t *",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_b"]
        ]
      },
      {
        "name": "rebel_string_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_b"]
        ]
      },
      {
        "name": "rebel_string_operator_plus",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_b"]
        ]
      },
      {
        "name": "rebel_string_length",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_casecmp_to",
        "return_type": "signed char",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_str"]
        ]
      },
      {
        "name": "rebel_string_nocasecmp_to",
        "return_type": "signed char",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_str"]
        ]
      },
      {
        "name": "rebel_string_naturalnocasecmp_to",
        "return_type": "signed char",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_str"]
        ]
      },
      {
        "name": "rebel_string_begins_with",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_string"]
        ]
      },
      {
        "name": "rebel_string_begins_with_char_array",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const char *", "p_char_array"]
        ]
      },
      {
        "name": "rebel_string_bigrams",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_chr",
        "return_type": "rebel_string",
        "arguments": [
          ["wchar_t", "p_character"]
        ]
      },
      {
        "name": "rebel_string_ends_with",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_string"]
        ]
      },
      {
        "name": "rebel_string_find",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"]
        ]
      },
      {
        "name": "rebel_string_find_from",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"],
          ["rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_string_findmk",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_keys"]
        ]
      },
      {
        "name": "rebel_string_findmk_from",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_keys"],
          ["rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_string_findmk_from_in_place",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_keys"],
          ["rebel_int", "p_from"],
          ["rebel_int *", "r_key"]
        ]
      },
      {
        "name": "rebel_string_findn",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"]
        ]
      },
      {
        "name": "rebel_string_findn_from",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"],
          ["rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_string_find_last",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"]
        ]
      },
      {
        "name": "rebel_string_format",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_variant *", "p_values"]
        ]
      },
      {
        "name": "rebel_string_format_with_custom_placeholder",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_variant *", "p_values"],
          ["const char *", "p_placeholder"]
        ]
      },
      {
        "name": "rebel_string_hex_encode_buffer",
        "return_type": "rebel_string",
        "arguments": [
          ["const uint8_t *", "p_buffer"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_hex_to_int",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_hex_to_int_without_prefix",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_insert",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_at_pos"],
          ["rebel_string", "p_string"]
        ]
      },
      {
        "name": "rebel_string_is_numeric",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_subsequence_of",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_string"]
        ]
      },
      {
        "name": "rebel_string_is_subsequence_ofi",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_string"]
        ]
      },
      {
        "name": "rebel_string_lpad",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_min_length"]
        ]
      },
      {
        "name": "rebel_string_lpad_with_custom_character",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_min_length"],
          ["const rebel_string *", "p_character"]
        ]
      },
      {
        "name": "rebel_string_match",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_wildcard"]
        ]
      },
      {
        "name": "rebel_string_matchn",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_wildcard"]
        ]
      },
      {
        "name": "rebel_string_md5",
        "return_type": "rebel_string",
        "arguments": [
          ["const uint8_t *", "p_md5"]
        ]
      },
      {
        "name": "rebel_string_num",
        "return_type": "rebel_string",
        "arguments": [
          ["double", "p_num"]
        ]
      },
      {
        "name": "rebel_string_num_int64",
        "return_type": "rebel_string",
        "arguments": [
          ["int64_t", "p_num"],
          ["rebel_int", "p_base"]
        ]
      },
      {
        "name": "rebel_string_num_int64_capitalized",
        "return_type": "rebel_string",
        "arguments": [
          ["int64_t", "p_num"],
          ["rebel_int", "p_base"],
          ["rebel_bool", "p_capitalize_hex"]
        ]
      },
      {
        "name": "rebel_string_num_real",
        "return_type": "rebel_string",
        "arguments": [
          ["double", "p_num"]
        ]
      },
      {
        "name": "rebel_string_num_scientific",
        "return_type": "rebel_string",
        "arguments": [
          ["double", "p_num"]
        ]
      },
      {
        "name": "rebel_string_num_with_decimals",
        "return_type": "rebel_string",
        "arguments": [
          ["double", "p_num"],
          ["rebel_int", "p_decimals"]
        ]
      },
      {
        "name": "rebel_string_pad_decimals",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_digits"]
        ]
      },
      {
        "name": "rebel_string_pad_zeros",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_digits"]
        ]
      },
      {
        "name": "rebel_string_replace_first",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_key"],
          ["rebel_string", "p_with"]
        ]
      },
      {
        "name": "rebel_string_replace",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_key"],
          ["rebel_string", "p_with"]
        ]
      },
      {
        "name": "rebel_string_replacen",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_key"],
          ["rebel_string", "p_with"]
        ]
      },
      {
        "name": "rebel_string_rfind",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"]
        ]
      },
      {
        "name": "rebel_string_rfindn",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"]
        ]
      },
      {
        "name": "rebel_string_rfind_from",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"],
          ["rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_string_rfindn_from",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_what"],
          ["rebel_int", "p_from"]
        ]
      },
      {
        "name": "rebel_string_rpad",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_min_length"]
        ]
      },
      {
        "name": "rebel_string_rpad_with_custom_character",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_min_length"],
          ["const rebel_string *", "p_character"]
        ]
      },
      {
        "name": "rebel_string_similarity",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_string"]
        ]
      },
      {
        "name": "rebel_string_sprintf",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_values"],
          ["rebel_bool *", "p_error"]
        ]
      },
      {
        "name": "rebel_string_substr",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_from"],
          ["rebel_int", "p_chars"]
        ]
      },
      {
        "name": "rebel_string_to_double",
        "return_type": "double",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_to_float",
        "return_type": "rebel_real",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_to_int",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_camelcase_to_underscore",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_camelcase_to_underscore_lowercased",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_capitalize",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_char_to_double",
        "return_type": "double",
        "arguments": [
          ["const char *", "p_what"]
        ]
      },
      {
        "name": "rebel_string_char_to_int",
        "return_type": "rebel_int",
        "arguments": [
          ["const char *", "p_what"]
        ]
      },
      {
        "name": "rebel_string_wchar_to_int",
        "return_type": "int64_t",
        "arguments": [
          ["const wchar_t *", "p_str"]
        ]
      },
      {
        "name": "rebel_string_char_to_int_with_len",
        "return_type": "rebel_int",
        "arguments": [
          ["const char *", "p_what"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_char_to_int64_with_len",
        "return_type": "int64_t",
        "arguments": [
          ["const wchar_t *", "p_str"],
          ["int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_hex_to_int64",
        "return_type": "int64_t",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_hex_to_int64_with_prefix",
        "return_type": "int64_t",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_to_int64",
        "return_type": "int64_t",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_unicode_char_to_double",
        "return_type": "double",
        "arguments": [
          ["const wchar_t *", "p_str"],
          ["const wchar_t **", "r_end"]
        ]
      },
      {
        "name": "rebel_string_get_slice_count",
        "return_type": "rebel_int",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_get_slice",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_string", "p_splitter"],
          ["rebel_int", "p_slice"]
        ]
      },
      {
        "name": "rebel_string_get_slicec",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["wchar_t", "p_splitter"],
          ["rebel_int", "p_slice"]
        ]
      },
      {
        "name": "rebel_string_split",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_allow_empty",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_floats",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_floats_allows_empty",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_floats_mk",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_splitters"]
        ]
      },
      {
        "name": "rebel_string_split_floats_mk_allows_empty",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_splitters"]
        ]
      },
      {
        "name": "rebel_string_split_ints",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_ints_allows_empty",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_splitter"]
        ]
      },
      {
        "name": "rebel_string_split_ints_mk",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_splitters"]
        ]
      },
      {
        "name": "rebel_string_split_ints_mk_allows_empty",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_array *", "p_splitters"]
        ]
      },
      {
        "name": "rebel_string_split_spaces",
        "return_type": "rebel_array",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_char_lowercase",
        "return_type": "wchar_t",
        "arguments": [
          ["wchar_t", "p_char"]
        ]
      },
      {
        "name": "rebel_string_char_uppercase",
        "return_type": "wchar_t",
        "arguments": [
          ["wchar_t", "p_char"]
        ]
      },
      {
        "name": "rebel_string_to_lower",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_to_upper",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_get_basename",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_get_extension",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_left",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_pos"]
        ]
      },
      {
        "name": "rebel_string_ord_at",
        "return_type": "wchar_t",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_idx"]
        ]
      },
      {
        "name": "rebel_string_plus_file",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_file"]
        ]
      },
      {
        "name": "rebel_string_right",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_pos"]
        ]
      },
      {
        "name": "rebel_string_strip_edges",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_bool", "p_left"],
          ["rebel_bool", "p_right"]
        ]
      },
      {
        "name": "rebel_string_strip_escapes",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_erase",
        "return_type": "void",
        "arguments": [
          ["rebel_string *", "p_self"],
          ["rebel_int", "p_pos"],
          ["rebel_int", "p_chars"]
        ]
      },
      {
        "name": "rebel_string_ascii",
        "return_type": "rebel_char_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_ascii_extended",
        "return_type": "rebel_char_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_utf8",
        "return_type": "rebel_char_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_parse_utf8",
        "return_type": "rebel_bool",
        "arguments": [
          ["rebel_string *", "p_self"],
          ["const char *", "p_utf8"]
        ]
      },
      {
        "name": "rebel_string_parse_utf8_with_len",
        "return_type": "rebel_bool",
        "arguments": [
          ["rebel_string *", "p_self"],
          ["const char *", "p_utf8"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_chars_to_utf8",
        "return_type": "rebel_string",
        "arguments": [
          ["const char *", "p_utf8"]
        ]
      },
      {
        "name": "rebel_string_chars_to_utf8_with_len",
        "return_type": "rebel_string",
        "arguments": [
          ["const char *", "p_utf8"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_hash",
        "return_type": "uint32_t",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_hash64",
        "return_type": "uint64_t",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_hash_chars",
        "return_type": "uint32_t",
        "arguments": [
          ["const char *", "p_cstr"]
        ]
      },
      {
        "name": "rebel_string_hash_chars_with_len",
        "return_type": "uint32_t",
        "arguments": [
          ["const char *", "p_cstr"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_hash_utf8_chars",
        "return_type": "uint32_t",
        "arguments": [
          ["const wchar_t *", "p_str"]
        ]
      },
      {
        "name": "rebel_string_hash_utf8_chars_with_len",
        "return_type": "uint32_t",
        "arguments": [
          ["const wchar_t *", "p_str"],
          ["rebel_int", "p_len"]
        ]
      },
      {
        "name": "rebel_string_md5_buffer",
        "return_type": "rebel_pool_byte_array",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_md5_text",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_sha256_buffer",
        "return_type": "rebel_pool_byte_array",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_sha256_text",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_empty",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_get_base_dir",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_get_file",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_humanize_size",
        "return_type": "rebel_string",
        "arguments": [
          ["uint64_t", "p_size"]
        ]
      },
      {
        "name": "rebel_string_is_abs_path",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_rel_path",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_resource_file",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_path_to",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_path"]
        ]
      },
      {
        "name": "rebel_string_path_to_file",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["const rebel_string *", "p_path"]
        ]
      },
      {
        "name": "rebel_string_simplify_path",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_c_escape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_c_escape_multiline",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_c_unescape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_http_escape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_http_unescape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_json_escape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_word_wrap",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_int", "p_chars_per_line"]
        ]
      },
      {
        "name": "rebel_string_xml_escape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_xml_escape_with_quotes",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_xml_unescape",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_percent_decode",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_percent_encode",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_valid_float",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_valid_hex_number",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"],
          ["rebel_bool", "p_with_prefix"]
        ]
      },
      {
        "name": "rebel_string_is_valid_html_color",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_valid_identifier",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_valid_integer",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_is_valid_ip_address",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_string *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_name_new",
        "return_type": "void",
        "arguments": [
          ["rebel_string_name *", "r_dest"],
          ["const rebel_string *", "p_name"]
        ]
      },
      {
        "name": "rebel_string_name_new_data",
        "return_type": "void",
        "arguments": [
          ["rebel_string_name *", "r_dest"],
          ["const char *", "p_name"]
        ]
      },
      {
        "name": "rebel_string_name_get_name",
        "return_type": "rebel_string",
        "arguments": [
          ["const rebel_string_name *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_name_get_hash",
        "return_type": "uint32_t",
        "arguments": [
          ["const rebel_string_name *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_name_get_data_unique_pointer",
        "return_type": "const void *",
        "arguments": [
          ["const rebel_string_name *", "p_self"]
        ]
      },
      {
        "name": "rebel_string_name_operator_equal",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string_name *", "p_self"],
          ["const rebel_string_name *", "p_other"]
        ]
      },
      {
        "name": "rebel_string_name_operator_less",
        "return_type": "rebel_bool",
        "arguments": [
          ["const rebel_string_name *", "p_self"],
          ["const rebel_string_name *", "p_other"]
        ]
      },
      {
        "name": "rebel_string_name_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_string_name *", "p_self"]
        ]
      },
      {
        "name": "rebel_object_destroy",
        "return_type": "void",
        "arguments": [
          ["rebel_object *", "p_o"]
        ]
      },
      {
        "name": "rebel_global_get_singleton",
        "return_type": "rebel_object *",
        "arguments": [
          ["char *", "p_name"]
        ]
      },
      {
        "name": "rebel_method_bind_get_method",
        "return_type": "rebel_method_bind *",
        "arguments": [
          ["const char *", "p_classname"],
          ["const char *", "p_methodname"]
        ]
      },
      {
        "name": "rebel_method_bind_ptrcall",
        "return_type": "void",
        "arguments": [
          ["rebel_method_bind *", "p_method_bind"],
          ["rebel_object *", "p_instance"],
          ["const void **", "p_args"],
          ["void *", "p_ret"]
        ]
      },
      {
        "name": "rebel_method_bind_call",
        "return_type": "rebel_variant",
        "arguments": [
          ["rebel_method_bind *", "p_method_bind"],
          ["rebel_object *", "p_instance"],
          ["const rebel_variant **", "p_args"],
          ["const int", "p_arg_count"],
          ["rebel_variant_call_error *", "p_call_error"]
        ]
      },
      {
        "name": "rebel_get_class_constructor",
        "return_type": "rebel_class_constructor",
        "arguments": [
          ["const char *", "p_classname"]
        ]
      },
      {
        "name": "rebel_get_global_constants",
        "return_type": "rebel_dictionary",
        "arguments": [
        ]
      },
      {
        "name": "rebel_register_native_call_type",
        "return_type": "void",
        "arguments": [
          ["const char *", "call_type"],
          ["native_call_cb", "p_callback"]
        ]
      },
      {
        "name": "rebel_alloc",
        "return_type": "void *",
        "arguments": [
          ["int", "p_bytes"]
        ]
      },
      {
        "name": "rebel_realloc",
        "return_type": "void *",
        "arguments": [
          ["void *", "p_ptr"],
          ["int", "p_bytes"]
        ]
      },
      {
        "name": "rebel_free",
        "return_type": "void",
        "arguments": [
          ["void *", "p_ptr"]
        ]
      },
      {
        "name": "rebel_print_error",
        "return_type": "void",
        "arguments": [
          ["const char *", "p_description"],
          ["const char *", "p_function"],
          ["const char *", "p_file"],
          ["int", "p_line"]
        ]
      },
      {
        "name": "rebel_print_warning",
        "return_type": "void",
        "arguments": [
          ["const char *", "p_description"],
          ["const char *", "p_function"],
          ["const char *", "p_file"],
          ["int", "p_line"]
        ]
      },
      {
        "name": "rebel_print",
        "return_type": "void",
        "arguments": [
          ["const rebel_string *", "p_message"]
        ]
      }
    ]
  },
  "extensions": [
    {
      "name": "nativescript",
      "type": "NATIVESCRIPT",
      "version": {
        "major": 1,
        "minor": 0
      },
      "next": {
        "type": "NATIVESCRIPT",
        "version": {
          "major": 1,
          "minor": 1
        },
        "next": null,
        "api": [
          {
            "name": "rebel_nativescript_set_method_argument_information",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["const char *", "p_function_name"],
              ["int", "p_num_args"],
              ["const rebel_method_arg *", "p_args"]
            ]
          },
          {
            "name": "rebel_nativescript_set_class_documentation",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["rebel_string", "p_documentation"]
            ]
          },
          {
            "name": "rebel_nativescript_set_method_documentation",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["const char *", "p_function_name"],
              ["rebel_string", "p_documentation"]
            ]
          },
          {
            "name": "rebel_nativescript_set_property_documentation",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["const char *", "p_path"],
              ["rebel_string", "p_documentation"]
            ]
          },
          {
            "name": "rebel_nativescript_set_signal_documentation",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["const char *", "p_signal_name"],
              ["rebel_string", "p_documentation"]
            ]
          },
          {
            "name": "rebel_nativescript_set_global_type_tag",
            "return_type": "void",
            "arguments": [
              ["int", "p_idx"],
              ["const char *", "p_name"],
              ["const void *", "p_type_tag"]
            ]
          },
          {
            "name": "rebel_nativescript_get_global_type_tag",
            "return_type": "const void *",
            "arguments": [
              ["int", "p_idx"],
              ["const char *", "p_name"]
            ]
          },
          {
            "name": "rebel_nativescript_set_type_tag",
            "return_type": "void",
            "arguments": [
              ["void *", "p_gdnative_handle"],
              ["const char *", "p_name"],
              ["const void *", "p_type_tag"]
            ]
          },
          {
            "name": "rebel_nativescript_get_type_tag",
            "return_type": "const void *",
            "arguments": [
              ["const rebel_object *", "p_object"]
            ]
          },
          {
            "name": "rebel_nativescript_register_instance_binding_data_functions",
            "return_type": "int",
            "arguments": [
              ["rebel_instance_binding_functions", "p_binding_functions"]
            ]
          },
          {
            "name": "rebel_nativescript_unregister_instance_binding_data_functions",
            "return_type": "void",
            "arguments": [
              ["int", "p_idx"]
            ]
          },
          {
            "name": "rebel_nativescript_get_instance_binding_data",
            "return_type": "void *",
            "arguments": [
              ["int", "p_idx"],
              ["rebel_object *", "p_object"]
            ]
          },
          {
            "name": "rebel_nativescript_profiling_add_data",
            "return_type": "void",
            "arguments": [
              ["const char *", "p_signature"],
              ["uint64_t", "p_line"]
            ]
          }
        ]
      },
      "api": [
        {
          "name": "rebel_nativescript_register_class",
          "return_type": "void",
          "arguments": [
            ["void *", "p_gdnative_handle"],
            ["const char *", "p_name"],
            ["const char *", "p_base"],
            ["rebel_instance_create_func", "p_create_func"],
            ["rebel_instance_destroy_func", "p_destroy_func"]
          ]
        },
        {
          "name": "rebel_nativescript_register_tool_class",
          "return_type": "void",
          "arguments": [
            ["void *", "p_gdnative_handle"],
            ["const char *", "p_name"],
            ["const char *", "p_base"],
            ["rebel_instance_create_func", "p_create_func"],
            ["rebel_instance_destroy_func", "p_destroy_func"]
          ]
        },
        {
          "name": "rebel_nativescript_register_method",
          "return_type": "void",
          "arguments": [
            ["void *", "p_gdnative_handle"],
            ["const char *", "p_name"],
            ["const char *", "p_function_name"],
            ["rebel_method_attributes", "p_attr"],
            ["rebel_instance_method", "p_method"]
          ]
        },
        {
          "name": "rebel_nativescript_register_property",
          "return_type": "void",
          "arguments": [
            ["void *", "p_gdnative_handle"],
            ["const char *", "p_name"],
            ["const char *", "p_path"],
            ["rebel_property_attributes *", "p_attr"],
            ["rebel_property_set_func", "p_set_func"],
            ["rebel_property_get_func", "p_get_func"]
          ]
        },
        {
          "name": "rebel_nativescript_register_signal",
          "return_type": "void",
          "arguments": [
            ["void *", "p_gdnative_handle"],
            ["const char *", "p_name"],
            ["const rebel_signal *", "p_signal"]
          ]
        },
        {
          "name": "rebel_nativescript_get_userdata",
          "return_type": "void *",
          "arguments": [
            ["rebel_object *", "p_instance"]
          ]
        }
      ]
    },
    {
      "name": "pluginscript",
      "type": "PLUGINSCRIPT",
      "version": {
        "major": 1,
        "minor": 0
      },
      "next": null,
      "api": [
        {
          "name": "rebel_pluginscript_register_language",
          "return_type": "void",
          "arguments": [
            ["const rebel_pluginscript_language_desc *", "language_desc"]
          ]
        }
      ]
    },
    {
      "name": "android",
      "type": "ANDROID",
      "version": {
        "major": 1,
        "minor": 1
      },
      "next": null,
      "api": [
        {
          "name": "rebel_android_get_env",
          "return_type": "JNIEnv*",
          "arguments": [
          ]
        },
        {
          "name": "rebel_android_get_activity",
          "return_type": "jobject",
          "arguments": [
          ]
        },
        {
          "name": "rebel_android_get_surface",
          "return_type": "jobject",
          "arguments": [
          ]
        },
        {
          "name": "rebel_android_is_activity_resumed",
          "return_type": "bool",
          "arguments": [
          ]
        }
      ]
    },
    {
      "name": "arvr",
      "type": "ARVR",
      "version": {
        "major": 1,
        "minor": 1
      },
      "next": {
        "name": "arvr",
        "type": "ARVR",
        "version": {
          "major": 1,
          "minor": 2
        },
        "next": null,
        "api": [
          {
            "name": "rebel_arvr_set_interface",
            "return_type": "void",
            "arguments": [
              ["rebel_object *", "p_arvr_interface"],
              ["const rebel_arvr_interface_gdnative *", "p_gdn_interface"]
            ]
          },
          {
            "name": "rebel_arvr_get_depthid",
            "return_type": "rebel_int",
            "arguments": [
              ["rebel_rid *", "p_render_target"]
            ]
          }
        ]
      },
      "api": [
        {
          "name": "rebel_arvr_register_interface",
          "return_type": "void",
          "arguments": [
            ["const rebel_arvr_interface_gdnative *", "p_interface"]
          ]
        },
        {
          "name": "rebel_arvr_get_worldscale",
          "return_type": "rebel_real",
          "arguments": []
        },
        {
          "name": "rebel_arvr_get_reference_frame",
          "return_type": "rebel_transform",
          "arguments": []
        },
        {
          "name": "rebel_arvr_blit",
          "return_type": "void",
          "arguments": [
            ["int", "p_eye"],
            ["rebel_rid *", "p_render_target"],
            ["rebel_rect2 *", "p_screen_rect"]
          ]
        },
        {
          "name": "rebel_arvr_get_texid",
          "return_type": "rebel_int",
          "arguments": [
            ["rebel_rid *", "p_render_target"]
          ]
        },
        {
          "name": "rebel_arvr_add_controller",
          "return_type": "rebel_int",
          "arguments": [
            ["char *", "p_device_name"],
            ["rebel_int", "p_hand"],
            ["rebel_bool", "p_tracks_orientation"],
            ["rebel_bool", "p_tracks_position"]
          ]
        },
        {
          "name": "rebel_arvr_remove_controller",
          "return_type": "void",
          "arguments": [
            ["rebel_int", "p_controller_id"]
          ]
        },
        {
          "name": "rebel_arvr_set_controller_transform",
          "return_type": "void",
          "arguments": [
            ["rebel_int", "p_controller_id"],
            ["rebel_transform *", "p_transform"],
            ["rebel_bool", "p_tracks_orientation"],
            ["rebel_bool", "p_tracks_position"]
          ]
        },
        {
          "name": "rebel_arvr_set_controller_button",
          "return_type": "void",
          "arguments": [
            ["rebel_int", "p_controller_id"],
            ["rebel_int", "p_button"],
            ["rebel_bool", "p_is_pressed"]
          ]
        },
        {
          "name": "rebel_arvr_set_controller_axis",
          "return_type": "void",
          "arguments": [
            ["rebel_int", "p_controller_id"],
            ["rebel_int", "p_exis"],
            ["rebel_real", "p_value"],
            ["rebel_bool", "p_can_be_negative"]
          ]
        },
        {
          "name": "rebel_arvr_get_controller_rumble",
          "return_type": "rebel_real",
          "arguments": [
            ["rebel_int", "p_controller_id"]
          ]
        }
      ]
    },
    {
      "name": "videodecoder",
      "type": "VIDEODECODER",
      "version": {
        "major": 0,
        "minor": 1
      },
      "next": null,
      "api": [
        {
          "name": "rebel_videodecoder_file_read",
          "return_type": "rebel_int",
          "arguments": [
            ["void *", "file_ptr"],
            ["uint8_t *", "buf"],
            ["int", "buf_size"]
          ]
        },
        {
          "name": "rebel_videodecoder_file_seek",
          "return_type": "int64_t",
          "arguments": [
            [ "void *", "file_ptr"],
            ["int64_t", "pos"],
            ["int", "whence"]
          ]
        },
        {
          "name": "rebel_videodecoder_register_decoder",
          "return_type": "void",
          "arguments": [
            ["const rebel_videodecoder_interface_gdnative *", "p_interface"]
          ]
        }
      ]
    },
    {
      "name": "net",
      "type": "NET",
      "version": {
        "major": 3,
        "minor": 1
      },
      "next": {
        "type": "NET",
        "version": {
          "major": 3,
          "minor": 2
        },
        "next": null,
        "api": [
          {
            "name": "rebel_net_set_webrtc_library",
            "return_type": "rebel_error",
            "arguments": [
              ["const rebel_net_webrtc_library *", "p_library"]
            ]
          },
          {
            "name": "rebel_net_bind_webrtc_peer_connection",
            "return_type": "void",
            "arguments": [
              ["rebel_object *", "p_obj"],
              ["const rebel_net_webrtc_peer_connection *", "p_interface"]
            ]
          },
          {
            "name": "rebel_net_bind_webrtc_data_channel",
            "return_type": "void",
            "arguments": [
              ["rebel_object *", "p_obj"],
              ["const rebel_net_webrtc_data_channel *", "p_interface"]
            ]
          }
        ]
      },
      "api": [
        {
          "name": "rebel_net_bind_stream_peer",
          "return_type": "void",
          "arguments": [
            ["rebel_object *", "p_obj"],
            ["const rebel_net_stream_peer *", "p_interface"]
          ]
        },
        {
          "name": "rebel_net_bind_packet_peer",
          "return_type": "void",
          "arguments": [
            ["rebel_object *", "p_obj"],
            ["const rebel_net_packet_peer *", "p_interface"]
          ]
        },
        {
          "name": "rebel_net_bind_multiplayer_peer",
          "return_type": "void",
          "arguments": [
            ["rebel_object *", "p_obj"],
            ["const rebel_net_multiplayer_peer *", "p_interface"]
          ]
        }
      ]
    }
  ]
}
