#!/usr/bin/env python

Import("env")

import os
from platform_methods import run_in_subprocess
import platform_windows_builders

windows_files = [
    "windows_audio_driver.cpp",
    "windows_crash_handler.cpp",
    "windows_dir_access.cpp",
    "windows_file_access.cpp",
    "windows_gl_context.cpp",
    "windows_joypad.cpp",
    "windows_key_mapping.cpp",
    "windows_main.cpp",
    "windows_os.cpp",
    "windows_power.cpp",
    "windows_terminal_logger.cpp",
]

res_file = "resource.rc"
res_target = "resource" + env["OBJSUFFIX"]
res_obj = env.RES(res_target, res_file)

prog = env.add_program(
    "#bin/rebel", windows_files + res_obj, PROGSUFFIX=env["PROGSUFFIX"]
)

# Microsoft Visual Studio Project Generation
if env["vsproj"]:
    env.vs_srcs += ["platform/windows/" + res_file]
    env.vs_srcs += ["platform/windows/rebel.natvis"]
    for file in windows_files:
        env.vs_srcs += ["platform/windows/" + str(file)]

if not os.getenv("VCINSTALLDIR"):
    if env["debug_symbols"] and env["separate_debug_symbols"]:
        env.AddPostAction(
            prog, run_in_subprocess(platform_windows_builders.make_debug_mingw)
        )
