buildscript {
    apply from: 'app/config.gradle'

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath libraries.androidGradlePlugin
    }
}

apply from: 'app/config.gradle'

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def binDir = "../../../bin"
def supportedTargets = ["release", "debug"]

/**
 * Copy the generated 'android_debug.apk' binary template into the bin directory.
 * Depends on the app build task to ensure the binary is generated prior to copying.
 */
task copyDebugBinaryToBin(type: Copy) {
    dependsOn ':app:assembleDebug'
    from('app/build/outputs/apk/debug')
    into(binDir)
    include('android_debug.apk')
}

/**
 * Copy the generated 'android_release.apk' binary template into the bin directory.
 * Depends on the app build task to ensure the binary is generated prior to copying.
 */
task copyReleaseBinaryToBin(type: Copy) {
    dependsOn ':app:assembleRelease'
    from('app/build/outputs/apk/release')
    into(binDir)
    include('android_release.apk')
}

/**
 * Copy the Rebel android library archive debug file into the app module debug libs directory.
 * Depends on the library build task to ensure the AAR file is generated prior to copying.
 */
task copyDebugAARToAppModule(type: Copy) {
    dependsOn ':lib:assembleDebug'
    from('lib/build/outputs/aar')
    into('app/libs/debug')
    include('rebel-lib.debug.aar')
}

/**
 * Copy the Rebel android library archive debug file into the root bin directory.
 * Depends on the library build task to ensure the AAR file is generated prior to copying.
 */
task copyDebugAARToBin(type: Copy) {
    dependsOn ':lib:assembleDebug'
    from('lib/build/outputs/aar')
    into(binDir)
    include('rebel-lib.debug.aar')
}

/**
 * Copy the Rebel android library archive release file into the app module release libs directory.
 * Depends on the library build task to ensure the AAR file is generated prior to copying.
 */
task copyReleaseAARToAppModule(type: Copy) {
    dependsOn ':lib:assembleRelease'
    from('lib/build/outputs/aar')
    into('app/libs/release')
    include('rebel-lib.release.aar')
}

/**
 * Copy the Rebel android library archive release file into the root bin directory.
 * Depends on the library build task to ensure the AAR file is generated prior to copying.
 */
task copyReleaseAARToBin(type: Copy) {
    dependsOn ':lib:assembleRelease'
    from('lib/build/outputs/aar')
    into(binDir)
    include('rebel-lib.release.aar')
}

/**
 * Generate custom build template by zipping the source files from the app directory, as well
 * as the AAR files generated by 'copyDebugAAR' and 'copyReleaseAAR'.
 * The zip file also includes some gradle tools to allow building of the custom build.
 */
task zipCustomBuild(type: Zip) {
    doFirst {
        logger.lifecycle("Creating the Rebel Android custom build template")
    }
    from(fileTree(dir: 'app', excludes: ['**/build/**', '**/.gradle/**', '**/*.iml']), fileTree(dir: '.', includes: ['gradlew', 'gradlew.bat', 'gradle/**']))
    include '**/*'
    archiveFileName = 'android_source.zip'
    destinationDirectory = file(binDir)
}

def templateBuildTasks = {
    def tasks = []

    // Only build the apks and aar files for which we have native shared libraries.
    for (String target : supportedTargets) {
        File targetLibs = new File("lib/libs/" + target)
        if (targetLibs != null
            && targetLibs.isDirectory()
            && targetLibs.listFiles() != null
            && targetLibs.listFiles().length > 0) {
            String capitalizedTarget = target.capitalize()
            // Copy the generated aar library files to the custom build directory.
            tasks += "copy" + capitalizedTarget + "AARToAppModule"
            // Copy the generated aar library files to the bin directory.
            tasks += "copy" + capitalizedTarget + "AARToBin"
            // Copy the prebuilt binary templates to the bin directory.
            tasks += "copy" + capitalizedTarget + "BinaryToBin"
        } else {
            logger.lifecycle("No native shared libs for target $target. Skipping build.")
        }
    }

    return tasks
}

/**
 * Creates the Rebel Engine Android templates for each previously built target and architecture.
 */
task createAndroidTemplates {
    dependsOn templateBuildTasks
    finalizedBy 'zipCustomBuild'
}

/**
 * Creates the development Android templates for each previously built target and architecture.
 */
task createDevelopmentAndroidTemplates {
    gradle.startParameter.projectProperties += [doNotStrip: true]
    finalizedBy 'createAndrdoidTempates'
}

/**
 * Remove all the created files and directories.
 */
task deleteAndroidTemplates(type: Delete) {
    // Delete the native libraries
    delete("lib/libs")

    // Delete the library AAR files
    delete("lib/build/outputs/aar")
    delete("app/libs")

    // Delete the created apks
    delete("app/build/outputs/apk")

    // Delete the template files in the bin directory
    delete("$binDir/android_debug.apk")
    delete("$binDir/android_release.apk")
    delete("$binDir/android_source.zip")
    delete("$binDir/rebel-lib.debug.aar")
    delete("$binDir/rebel-lib.release.aar")

    finalizedBy getTasksByName("clean", true)
}
