// Do not remove/modify comments ending with BEGIN/END,
// they are used to inject addon-specific configuration.
buildscript {
    repositories {
//CHUNK_BUILDSCRIPT_REPOSITORIES_BEGIN
//CHUNK_BUILDSCRIPT_REPOSITORIES_END
    }
    dependencies {
//CHUNK_BUILDSCRIPT_DEPENDENCIES_BEGIN
//CHUNK_BUILDSCRIPT_DEPENDENCIES_END
    }
}

plugins {
    alias libs.plugins.androidApplication
    alias libs.plugins.androidAssetPack
}

apply from: 'config.gradle'

allprojects {
    repositories {
//CHUNK_ALL_PROJECTS_REPOSITORIES_BEGIN
//CHUNK_ALL_PROJECTS_REPOSITORIES_END
        def pluginsMavenRepos = arrayProperty("plugins_maven_repos")
        for (repositoryURL in pluginsMavenRepos) {
            maven {
                url repositoryURL
            }
        }
    }
}

dependencies {
    implementation libs.androidxFragment

    if (rootProject.findProject(":lib")) {
        implementation project(":lib")
    } else {
        // Rebel Editor custom build mode.
        // Use pre-generated rebel-lib.*.aar android archive files.
        debugImplementation fileTree(dir: 'libs/debug', include: ['*.jar', '*.aar'])
        releaseImplementation fileTree(dir: 'libs/release', include: ['*.jar', '*.aar'])
    }

    def pluginsRemoteDependencies = arrayProperty("plugins_remote_dependencies")
    for (String pluginRemoteDependency in pluginsRemoteDependencies) {
        implementation pluginRemoteDependency
    }
    implementation files(arrayProperty("plugins_local_dependencies"))
//CHUNK_DEPENDENCIES_BEGIN
//CHUNK_DEPENDENCIES_END
}

// Android transitive dependencies pull in different versions of the Kotlin JDK.
// Since Kotlin stdlib v1.8 now includes the JDK; it doesn't need to be included separately.
// However, we exclude the stdlib JDK module to avoid duplicate JDK classes being included.
// This will need to be removed when all Android transitive dependencies use Kotlin stdlib v1.8.
// Reference: https://stackoverflow.com/a/75315276
configurations.implementation {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

android {
    namespace 'com.rebeltoolbox.rebelapp'
    compileSdk versions.compileSdk

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    assetPacks = [":assetPacks:installTime"]

    defaultConfig {
        // The default ignore pattern for the 'assets' directory includes
        // hidden files and directories that are used by Rebel projects.
        aaptOptions {
            ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        }

        ndk {
            def exportEnabledABIs = arrayProperty("export_enabled_abis", "armeabi-v7a|arm64-v8a|x86|x86_64")
            for (abi in exportEnabledABIs) {
                abiFilter abi
            }
        }

        manifestPlaceholders.editorVersion = stringProperty("editor_version", buildVersion())

        applicationId stringProperty("export_package_name", "com.rebeltoolbox.rebelapp")
        versionName stringProperty("export_version_name", "1.0")
        versionCode integerProperty("export_version_code", 1)
        minSdk integerProperty("export_version_min_sdk", versions.minSdk)
        targetSdk integerProperty("export_version_target_sdk", versions.targetSdk)
//CHUNK_ANDROID_DEFAULT_CONFIG_BEGIN
//CHUNK_ANDROID_DEFAULT_CONFIG_END
    }

    ndkVersion versions.ndkVersion

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE']
        }
        if (project.hasProperty("doNotStrip")) {
            doNotStrip '**/*.so'
        }
    }

    signingConfigs {
        debug {
            def debugStoreFile = new File (stringProperty("debug_keystore_file", "."))
            def debugKeyAlias = stringProperty("debug_keystore_alias", "androiddebugkey")
            def debugPassword = stringProperty("debug_keystore_password", "android")
            if (debugStoreFile.isFile()) {
                storeFile debugStoreFile
                keyAlias debugKeyAlias
                storePassword debugPassword
                keyPassword debugPassword
            }
        }
        release {
            def releaseStoreFile = new File(stringProperty("release_keystore_file", "."))
            def releaseKeyAlias = stringProperty("release_keystore_alias", "")
            def releasePassword = stringProperty("release_keystore_password", "")
            if (releaseStoreFile.isFile()) {
                storeFile releaseStoreFile
                keyAlias releaseKeyAlias
                storePassword releasePassword
                keyPassword releasePassword
            }
        }
    }

    buildTypes {
        debug {
            signingConfig project.hasProperty("perform_signing")
                ? signingConfigs.debug
                : null
        }
        release {
            signingConfig project.hasProperty("perform_signing")
                ? signingConfigs.release
                : null
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [
                'src'
//DIR_SRC_BEGIN
//DIR_SRC_END
            ]
            res.srcDirs = [
                'res'
//DIR_RES_BEGIN
//DIR_RES_END
            ]
            aidl.srcDirs = [
                'aidl'
//DIR_AIDL_BEGIN
//DIR_AIDL_END
            ]
            assets.srcDirs = [
                'assets'
//DIR_ASSETS_BEGIN
//DIR_ASSETS_END
            ]
        }
        debug.jniLibs.srcDirs = [
            'libs/debug'
//DIR_JNI_DEBUG_BEGIN
//DIR_JNI_DEBUG_END
        ]
        release.jniLibs.srcDirs = [
            'libs/release'
//DIR_JNI_RELEASE_BEGIN
//DIR_JNI_RELEASE_END
        ]
    }

    lint {
        abortOnError false
        disable 'MissingTranslation', 'UnusedResources'
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            output.outputFileName = "android_${variant.name}.apk"
        }
        def buildType = variant.buildType.name.capitalize()
        if (findProject(":app")) {
            tasks.named("merge${buildType}JniLibFolders") {
                dependsOn ":copy${buildType}AARToAppModule"
            }
        }
    }
}

def exportPath = stringProperty("export_path", ".")
def exportFilename = stringProperty("export_filename", "rebel_android")

tasks.register('copyAndRenameDebugApk', Copy) {
    from layout.buildDirectory.dir("outputs/apk/debug/android_debug.apk")
    into exportPath
    rename "android_debug.apk", exportFilename
}

tasks.register('copyAndRenameReleaseApk', Copy) {
    from layout.buildDirectory.dir("outputs/apk/release/android_release.apk")
    into exportPath
    rename "android_release.apk", exportFilename
}

tasks.register('copyAndRenameDebugAab', Copy) {
    from layout.buildDirectory.dir("outputs/bundle/debug/build-debug.aab")
    into exportPath
    rename "build-debug.aab", exportFilename
}

tasks.register('copyAndRenameReleaseAab', Copy) {
    from layout.buildDirectory.dir("outputs/bundle/release/build-release.aab")
    into exportPath
    rename "build-release.aab", exportFilename
}

//CHUNK_GLOBAL_BEGIN
//CHUNK_GLOBAL_END
