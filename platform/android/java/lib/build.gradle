plugins {
    id 'com.android.library'
}

dependencies {
    implementation libraries.androidxFragment
}

android {
    namespace 'com.rebeltoolbox.rebelengine'
    compileSdk versions.compileSdk

    ndkVersion versions.ndkVersion

    defaultConfig {
        minSdk versions.minSdk
        targetSdk versions.targetSdk

        manifestPlaceholders = [libraryVersion: getLibraryVersion()]
    }

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE']
        }

        // 'doNotStrip' is enabled for development within Android Studio
        if (shouldNotStrip()) {
            doNotStrip '**/*.so'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['aidl']
            assets.srcDirs = ['assets']
        }
        debug.jniLibs.srcDirs = ['libs/debug']
        release.jniLibs.srcDirs = ['libs/release']
    }

    lint {
        abortOnError false
        disable 'MissingTranslation', 'UnusedResources'
    }

    buildFeatures {
        aidl true
        buildConfig true
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = "rebel-lib.${variant.name}.aar"
        }
        def buildType = variant.buildType.name.capitalize()
        // Ensure all compiled libraries are present before the Android libraries are created.
        tasks.named("merge${buildType}JniLibFolders") {
            mustRunAfter "compile${buildType}RebelEngine"
        }
    }
}

def sourceDir = "../../../.."
def supportedABIs = ["armv7", "arm64v8", "x86", "x86_64"]
def scons = "scons" + (System.getProperty("os.name") == "Windows" ? ".exe" : "")
def processors = Runtime.runtime.availableProcessors()

def allCompileRebelEngineTasks = { buildType ->
    def tasks = []
    for (abi in supportedABIs) {
        tasks.add("compile${abi.capitalize()}${buildType.capitalize()}RebelEngine")
    }
    return tasks
}

tasks.register('buildRebelEngine') {
    group "Rebel"
    description "Builds all the Rebel Engine libraries for all supported architectures."
    dependsOn 'compileDebugRebelEngine'
    dependsOn 'compileReleaseRebelEngine'
    finalizedBy 'build'
}

tasks.register('compileDebugRebelEngine') {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for all supported architectures."
    dependsOn allCompileRebelEngineTasks('Debug')
    finalizedBy 'build'
}

tasks.register('compileReleaseRebelEngine') {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for all supported architectures."
    dependsOn allCompileRebelEngineTasks('Release')
    finalizedBy 'build'
}

// Compile Rebel Engine debug libraries
tasks.register('compileArmv7DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 32 bit Arm v7."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=armv7"
    finalizedBy 'build'
}

tasks.register('compileArm64v8DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 64 bit Arm v8."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=arm64v8"
    finalizedBy 'build'
}

tasks.register('compileX86DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 32 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=x86"
    finalizedBy 'build'
}

tasks.register('compileX86_64DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 64 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=x86_64"
    finalizedBy 'build'
}

// Compile Rebel Engine release libraries
tasks.register('compileArmv7ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 32 bit Arm v7."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=armv7"
    finalizedBy 'build'
}

tasks.register('compileArm64v8ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 64 bit Arm v8."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=arm64v8"
    finalizedBy 'build'
}

tasks.register('compileX86ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 32 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=x86"
    finalizedBy 'build'
}

tasks.register('compileX86_64ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 64 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=x86_64"
    finalizedBy 'build'
}
