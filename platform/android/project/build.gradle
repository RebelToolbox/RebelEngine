apply from: 'app/config.gradle'

def binDir = "../../../bin"
def supportedBuildTypes = ["release", "debug"]

def templateBuildTasks = {
    def tasks = []
    // Only build the apks and aar files for which we have native shared libraries.
    for (String buildType : supportedBuildTypes) {
        File buildTypeDir = new File("lib/libs/" + buildType)
        if (buildTypeDir != null
            && buildTypeDir.isDirectory()
            && buildTypeDir.listFiles() != null
            && buildTypeDir.listFiles().length > 0) {
            // Copy the generated aar library files to the custom build directory.
            tasks.add("copy${buildType.capitalize()}AARToAppModule")
            // Copy the generated aar library files to the bin directory.
            tasks.add("copy${buildType.capitalize()}AARToBin")
            // Copy the prebuilt binary templates to the bin directory.
            tasks.add("copy${buildType.capitalize()}BinaryToBin")
        } else {
            logger.lifecycle("No native shared libs for buildType $buildType. Skipping build.")
        }
    }
    return tasks
}

tasks.register('createAndroidTemplates') {
    group "Rebel"
    description "Creates the Rebel Engine Android templates for each previously built build type and architecture."
    dependsOn templateBuildTasks
    finalizedBy 'createCustomBuildTemplate'
}

tasks.register('createDevelopmentAndroidTemplates') {
    group "Rebel"
    description "Creates development Android templates for each previously built build type and architecture."
    gradle.startParameter.projectProperties += [doNotStrip: true]
    finalizedBy 'createAndrdoidTempates'
}

tasks.register('deleteAndroidTemplates', Delete) {
    group "Rebel"
    description "Deletes the Rebel Engine Android templates created using createAndroidTemplates."
    delete "lib/libs"
    delete "lib/build/outputs/aar"
    delete "app/libs"
    delete "app/build/outputs/apk"
    delete "$binDir/android_debug.apk"
    delete "$binDir/android_release.apk"
    delete "$binDir/android_template.zip"
    delete "$binDir/rebel-lib.debug.aar"
    delete "$binDir/rebel-lib.release.aar"
    finalizedBy getTasksByName("clean", true)
}

// Copy the generated 'android_debug.apk' binary template into the bin directory.
// Depends on the app build task to ensure the binary is generated prior to copying.
tasks.register('copyDebugBinaryToBin', Copy) {
    dependsOn ':app:assembleDebug'
    from 'app/build/outputs/apk/debug'
    into binDir
    include 'android_debug.apk'
}

// Copy the generated 'android_release.apk' binary template into the bin directory.
// Depends on the app build task to ensure the binary is generated prior to copying.
tasks.register('copyReleaseBinaryToBin', Copy) {
    dependsOn ':app:assembleRelease'
    from 'app/build/outputs/apk/release'
    into binDir
    include 'android_release.apk'
}

// Copy the Rebel android library archive debug file into the app module debug libs directory.
// Depends on the library build task to ensure the AAR file is generated prior to copying.
tasks.register('copyDebugAARToAppModule', Copy) {
    dependsOn ':lib:assembleDebug'
    from 'lib/build/outputs/aar'
    into 'app/libs/debug'
    include 'rebel-lib.debug.aar'
}

// Copy the Rebel android library archive debug file into the root bin directory.
// Depends on the library build task to ensure the AAR file is generated prior to copying.
tasks.register('copyDebugAARToBin', Copy) {
    dependsOn ':lib:assembleDebug'
    from 'lib/build/outputs/aar'
    into binDir
    include 'rebel-lib.debug.aar'
}

// Copy the Rebel android library archive release file into the app module release libs directory.
// Depends on the library build task to ensure the AAR file is generated prior to copying.
tasks.register('copyReleaseAARToAppModule', Copy) {
    dependsOn ':lib:assembleRelease'
    from 'lib/build/outputs/aar'
    into 'app/libs/release'
    include 'rebel-lib.release.aar'
}

// Copy the Rebel android library archive release file into the root bin directory.
// Depends on the library build task to ensure the AAR file is generated prior to copying.
tasks.register('copyReleaseAARToBin', Copy) {
    dependsOn ':lib:assembleRelease'
    from 'lib/build/outputs/aar'
    into binDir
    include 'rebel-lib.release.aar'
}

// Generate custom build template by zipping the source files from the app directory,
// the AAR files generated by 'copyDebugAAR' and 'copyReleaseAAR', and
// Gradle tools to build the template.
tasks.register('createCustomBuildTemplate', Zip) {
    from (
        fileTree(dir: 'app', excludes: ['**/build/**', '**/.gradle/**', '**/*.iml']),
        fileTree(dir: '.', includes: ['gradlew', 'gradlew.bat', 'gradle/**'])
    )
    include '**/*'
    archiveFileName = 'android_template.zip'
    destinationDirectory = file(binDir)
}
