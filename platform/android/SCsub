#!/usr/bin/env python

Import("env")

android_files = [
    "os_android.cpp",
    "android_input_handler.cpp",
    "file_access_android.cpp",
    "audio_driver_opensl.cpp",
    "android_jni_dir_access.cpp",
    "thread_jandroid.cpp",
    "net_socket_android.cpp",
    "android_jni.cpp",
    "java_class_wrapper.cpp",
    "android_jni_os.cpp",
    "android_jni_io.cpp",
    "jni_utils.cpp",
    "android_keys_utils.cpp",
    "android_jni_plugin.cpp",
]

env_android = env.Clone()

android_objects = []
for x in android_files:
    android_objects.append(env_android.SharedObject(x))

env_thirdparty = env_android.Clone()
env_thirdparty.disable_warnings()
thirdparty_obj = env_thirdparty.SharedObject("#thirdparty/misc/ifaddrs-android.cc")
android_objects.append(thirdparty_obj)

lib = env_android.add_shared_library(
    "#bin/librebel", [android_objects], SHLIBSUFFIX=env["SHLIBSUFFIX"]
)

# Needed to force rebuilding the platform files when the thirdparty code is updated.
env.Depends(lib, thirdparty_obj)

arch_dir = ""
if env["android_arch"] == "armv7":
    arch_dir = "armeabi-v7a/"
elif env["android_arch"] == "arm64v8":
    arch_dir = "arm64-v8a/"
elif env["android_arch"] == "x86":
    arch_dir = "x86/"
elif env["android_arch"] == "x86_64":
    arch_dir = "x86_64/"
else:
    print(
        "WARN: Architecture not suitable for embedding into APK; keeping .so at \\bin"
    )

if arch_dir != "":
    if env["target"] == "release":
        build_dir = "release/"
    else:  # release_debug, debug
        build_dir = "debug/"

    project_src_dir = "project/engine/src/"
    target = project_src_dir + build_dir + "jniLibs/" + arch_dir + "librebel_android.so"
    source = "#bin/librebel" + env["SHLIBSUFFIX"]
    env_android.Command(target, source, Copy("$TARGET", "$SOURCE"))
    target = project_src_dir + "main/" + "jniLibs/" + arch_dir + "libc++_shared.so"
    source = env["LIBC"]
    env_android.Command(target, source, Copy("$TARGET", "$SOURCE"))
