plugins {
    alias libs.plugins.androidLibrary
}

dependencies {
    implementation libs.androidxFragment
}

// Android transitive dependencies pull in different versions of the Kotlin JDK.
// Since Kotlin stdlib v1.8 now includes the JDK; it doesn't need to be included separately.
// However, we exclude the stdlib JDK module to avoid duplicate JDK classes being included.
// This will need to be removed when all Android transitive dependencies use Kotlin stdlib v1.8.
// Reference: https://stackoverflow.com/a/75315276
configurations.implementation {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

android {
    namespace = 'com.rebeltoolbox.rebelengine'
    compileSdk = versions.compileSdk
    ndkVersion = versions.ndkVersion

    defaultConfig {
        minSdk = versions.minSdk
        targetSdk = versions.targetSdk
        manifestPlaceholders.libraryVersion = buildVersion()
    }

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE']
        }
        if (project.hasProperty("doNotStrip")) {
            doNotStrip '**/*.so'
        }
    }

    lint {
        abortOnError = false
        disable 'MissingTranslation', 'UnusedResources'
    }

    buildFeatures {
        aidl = true
        buildConfig = true
    }

    // Provides access to the Rebel source files.
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

// We use SCons to build the native libraries.
// So, we need to disable the buildCMake* tasks.
tasks.configureEach { task ->
    if(task.name.contains("buildCMake")) {
        task.enabled = false
    }
}

def sourceDir = "../../../.."
def supportedABIs = ["armv7", "arm64v8", "x86", "x86_64"]
def scons = "scons" + (System.getProperty("os.name") == "Windows" ? ".exe" : "")
def processors = Runtime.runtime.availableProcessors()

def allCompileRebelEngineTasks = { buildType ->
    def tasks = []
    for (abi in supportedABIs) {
        tasks.add("compile${abi.capitalize()}${buildType.capitalize()}RebelEngine")
    }
    return tasks
}

tasks.register('buildRebelEngine') {
    group "Rebel"
    description "Builds all the Rebel Engine libraries for all supported architectures."
    dependsOn 'compileDebugRebelEngine'
    dependsOn 'compileReleaseRebelEngine'
    finalizedBy 'build'
}

tasks.register('compileDebugRebelEngine') {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for all supported architectures."
    dependsOn allCompileRebelEngineTasks('Debug')
    finalizedBy 'build'
}

tasks.register('compileReleaseRebelEngine') {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for all supported architectures."
    dependsOn allCompileRebelEngineTasks('Release')
    finalizedBy 'build'
}

// Compile Rebel Engine debug libraries
tasks.register('compileArmv7DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 32 bit Arm v7."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=armv7"
    finalizedBy 'build'
}

tasks.register('compileArm64v8DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 64 bit Arm v8."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=arm64v8"
    finalizedBy 'build'
}

tasks.register('compileX86DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 32 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=x86"
    finalizedBy 'build'
}

tasks.register('compileX86_64DebugRebelEngine', Exec) {
    group "Rebel Debug"
    description "Builds the debug Rebel Engine libraries for 64 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release_debug", "android_arch=x86_64"
    finalizedBy 'build'
}

// Compile Rebel Engine release libraries
tasks.register('compileArmv7ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 32 bit Arm v7."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=armv7"
    finalizedBy 'build'
}

tasks.register('compileArm64v8ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 64 bit Arm v8."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=arm64v8"
    finalizedBy 'build'
}

tasks.register('compileX86ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 32 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=x86"
    finalizedBy 'build'
}

tasks.register('compileX86_64ReleaseRebelEngine', Exec) {
    group "Rebel Release"
    description "Builds the release Rebel Engine libraries for 64 bit x86."
    executable scons
    args "-j${processors}", "--directory=${sourceDir}", "platform=android", "target=release", "android_arch=x86_64"
    finalizedBy 'build'
}
